
DMMSwitchBoardVCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004270  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000010c  20000000  0800443c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008cc  2000010c  08004548  0002010c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200009d8  08004548  000209d8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005861  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001736  00000000  00000000  00025996  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000280  00000000  00000000  000270d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002f32  00000000  00000000  00027350  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000242b  00000000  00000000  0002a282  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007e  00000000  00000000  0002c6ad  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001d50  00000000  00000000  0002c72c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  0002e480  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000010c 	.word	0x2000010c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004364 	.word	0x08004364

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000110 	.word	0x20000110
 8000148:	08004364 	.word	0x08004364

0800014c <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 8000152:	2001      	movs	r0, #1
 8000154:	f000 fd6c 	bl	8000c30 <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
 8000158:	2301      	movs	r3, #1
 800015a:	80fb      	strh	r3, [r7, #6]
  _SetCNTR(wRegVal);
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <PowerOn+0x44>)
 800015e:	88fb      	ldrh	r3, [r7, #6]
 8000160:	6013      	str	r3, [r2, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
 8000162:	4b0c      	ldr	r3, [pc, #48]	; (8000194 <PowerOn+0x48>)
 8000164:	2200      	movs	r2, #0
 8000166:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 8000168:	4b09      	ldr	r3, [pc, #36]	; (8000190 <PowerOn+0x44>)
 800016a:	4a0a      	ldr	r2, [pc, #40]	; (8000194 <PowerOn+0x48>)
 800016c:	8812      	ldrh	r2, [r2, #0]
 800016e:	601a      	str	r2, [r3, #0]
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8000170:	4b09      	ldr	r3, [pc, #36]	; (8000198 <PowerOn+0x4c>)
 8000172:	2200      	movs	r2, #0
 8000174:	601a      	str	r2, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8000176:	4b07      	ldr	r3, [pc, #28]	; (8000194 <PowerOn+0x48>)
 8000178:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800017c:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800017e:	4b04      	ldr	r3, [pc, #16]	; (8000190 <PowerOn+0x44>)
 8000180:	4a04      	ldr	r2, [pc, #16]	; (8000194 <PowerOn+0x48>)
 8000182:	8812      	ldrh	r2, [r2, #0]
 8000184:	601a      	str	r2, [r3, #0]
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40005c40 	.word	0x40005c40
 8000194:	200009d0 	.word	0x200009d0
 8000198:	40005c44 	.word	0x40005c44

0800019c <PowerOff>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
#ifndef STM32F10X_CL
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <PowerOff+0x24>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	601a      	str	r2, [r3, #0]
  /* clear interrupt status register */
  _SetISTR(0);
 80001a6:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <PowerOff+0x28>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 fd3f 	bl	8000c30 <USB_Cable_Config>
  /* switch-off device */
  _SetCNTR(CNTR_FRES + CNTR_PDWN);
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <PowerOff+0x24>)
 80001b4:	2203      	movs	r2, #3
 80001b6:	601a      	str	r2, [r3, #0]
#endif /* STM32F10X_CL */

  /* sw variables reset */
  /* ... */

  return USB_SUCCESS;
 80001b8:	2300      	movs	r3, #0
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40005c40 	.word	0x40005c40
 80001c4:	40005c44 	.word	0x40005c44

080001c8 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  uint16_t wCNTR;
  /* suspend preparation */
  /* ... */

  /* macrocell enters suspend mode */
  wCNTR = _GetCNTR();
 80001ce:	4b0d      	ldr	r3, [pc, #52]	; (8000204 <Suspend+0x3c>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	80fb      	strh	r3, [r7, #6]
  wCNTR |= CNTR_FSUSP;
 80001d4:	88fb      	ldrh	r3, [r7, #6]
 80001d6:	f043 0308 	orr.w	r3, r3, #8
 80001da:	80fb      	strh	r3, [r7, #6]
  _SetCNTR(wCNTR);
 80001dc:	4a09      	ldr	r2, [pc, #36]	; (8000204 <Suspend+0x3c>)
 80001de:	88fb      	ldrh	r3, [r7, #6]
 80001e0:	6013      	str	r3, [r2, #0]
  /* power reduction */
  /* ... on connected devices */

#ifndef STM32F10X_CL
  /* force low-power mode in the macrocell */
  wCNTR = _GetCNTR();
 80001e2:	4b08      	ldr	r3, [pc, #32]	; (8000204 <Suspend+0x3c>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	80fb      	strh	r3, [r7, #6]
  wCNTR |= CNTR_LPMODE;
 80001e8:	88fb      	ldrh	r3, [r7, #6]
 80001ea:	f043 0304 	orr.w	r3, r3, #4
 80001ee:	80fb      	strh	r3, [r7, #6]
  _SetCNTR(wCNTR);
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <Suspend+0x3c>)
 80001f2:	88fb      	ldrh	r3, [r7, #6]
 80001f4:	6013      	str	r3, [r2, #0]
#endif /* STM32F10X_CL */

  /* switch-off the clocks */
  /* ... */
  Enter_LowPowerMode();
 80001f6:	f000 fcdd 	bl	8000bb4 <Enter_LowPowerMode>

}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40005c40 	.word	0x40005c40

08000208 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
  /* restart the clocks */
  /* ...  */

#ifndef STM32F10X_CL
  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800020e:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <Resume_Init+0x30>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	80fb      	strh	r3, [r7, #6]
  wCNTR &= (~CNTR_LPMODE);
 8000214:	88fb      	ldrh	r3, [r7, #6]
 8000216:	f023 0304 	bic.w	r3, r3, #4
 800021a:	80fb      	strh	r3, [r7, #6]
  _SetCNTR(wCNTR);
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <Resume_Init+0x30>)
 800021e:	88fb      	ldrh	r3, [r7, #6]
 8000220:	6013      	str	r3, [r2, #0]
#endif /* STM32F10X_CL */ 

  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8000222:	f000 fcd3 	bl	8000bcc <Leave_LowPowerMode>

#ifndef STM32F10X_CL
  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 8000226:	4b04      	ldr	r3, [pc, #16]	; (8000238 <Resume_Init+0x30>)
 8000228:	f44f 4206 	mov.w	r2, #34304	; 0x8600
 800022c:	601a      	str	r2, [r3, #0]
#endif /* STM32F10X_CL */

  /* reverse suspend preparation */
  /* ... */

}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40005c40 	.word	0x40005c40

0800023c <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
#ifndef STM32F10X_CL
  uint16_t wCNTR;
#endif /* STM32F10X_CL */

  if (eResumeSetVal != RESUME_ESOF)
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b07      	cmp	r3, #7
 800024a:	d002      	beq.n	8000252 <Resume+0x16>
    ResumeS.eState = eResumeSetVal;
 800024c:	4a38      	ldr	r2, [pc, #224]	; (8000330 <Resume+0xf4>)
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	7013      	strb	r3, [r2, #0]

  switch (ResumeS.eState)
 8000252:	4b37      	ldr	r3, [pc, #220]	; (8000330 <Resume+0xf4>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	b2db      	uxtb	r3, r3
 8000258:	2b05      	cmp	r3, #5
 800025a:	d85d      	bhi.n	8000318 <Resume+0xdc>
 800025c:	a201      	add	r2, pc, #4	; (adr r2, 8000264 <Resume+0x28>)
 800025e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000262:	bf00      	nop
 8000264:	0800027d 	.word	0x0800027d
 8000268:	08000289 	.word	0x08000289
 800026c:	08000295 	.word	0x08000295
 8000270:	080002a3 	.word	0x080002a3
 8000274:	080002c3 	.word	0x080002c3
 8000278:	080002e5 	.word	0x080002e5
  {
    case RESUME_EXTERNAL:
      Resume_Init();
 800027c:	f7ff ffc4 	bl	8000208 <Resume_Init>
      ResumeS.eState = RESUME_OFF;
 8000280:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <Resume+0xf4>)
 8000282:	2206      	movs	r2, #6
 8000284:	701a      	strb	r2, [r3, #0]
      break;
 8000286:	e04e      	b.n	8000326 <Resume+0xea>
    case RESUME_INTERNAL:
      Resume_Init();
 8000288:	f7ff ffbe 	bl	8000208 <Resume_Init>
      ResumeS.eState = RESUME_START;
 800028c:	4b28      	ldr	r3, [pc, #160]	; (8000330 <Resume+0xf4>)
 800028e:	2204      	movs	r2, #4
 8000290:	701a      	strb	r2, [r3, #0]
      break;
 8000292:	e048      	b.n	8000326 <Resume+0xea>
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8000294:	4b26      	ldr	r3, [pc, #152]	; (8000330 <Resume+0xf4>)
 8000296:	2202      	movs	r2, #2
 8000298:	705a      	strb	r2, [r3, #1]
      ResumeS.eState = RESUME_WAIT;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <Resume+0xf4>)
 800029c:	2203      	movs	r2, #3
 800029e:	701a      	strb	r2, [r3, #0]
      break;
 80002a0:	e041      	b.n	8000326 <Resume+0xea>
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 80002a2:	4b23      	ldr	r3, [pc, #140]	; (8000330 <Resume+0xf4>)
 80002a4:	785b      	ldrb	r3, [r3, #1]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	3b01      	subs	r3, #1
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b20      	ldr	r3, [pc, #128]	; (8000330 <Resume+0xf4>)
 80002ae:	705a      	strb	r2, [r3, #1]
      if (ResumeS.bESOFcnt == 0)
 80002b0:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <Resume+0xf4>)
 80002b2:	785b      	ldrb	r3, [r3, #1]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d132      	bne.n	8000320 <Resume+0xe4>
        ResumeS.eState = RESUME_START;
 80002ba:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <Resume+0xf4>)
 80002bc:	2204      	movs	r2, #4
 80002be:	701a      	strb	r2, [r3, #0]
      break;
 80002c0:	e02e      	b.n	8000320 <Resume+0xe4>
    case RESUME_START:
     #ifdef STM32F10X_CL
      OTGD_FS_SetRemoteWakeup();
     #else 
      wCNTR = _GetCNTR();
 80002c2:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <Resume+0xf8>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	81fb      	strh	r3, [r7, #14]
      wCNTR |= CNTR_RESUME;
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	81fb      	strh	r3, [r7, #14]
      _SetCNTR(wCNTR);
 80002d0:	4a18      	ldr	r2, [pc, #96]	; (8000334 <Resume+0xf8>)
 80002d2:	89fb      	ldrh	r3, [r7, #14]
 80002d4:	6013      	str	r3, [r2, #0]
     #endif /* STM32F10X_CL */
      ResumeS.eState = RESUME_ON;
 80002d6:	4b16      	ldr	r3, [pc, #88]	; (8000330 <Resume+0xf4>)
 80002d8:	2205      	movs	r2, #5
 80002da:	701a      	strb	r2, [r3, #0]
      ResumeS.bESOFcnt = 10;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <Resume+0xf4>)
 80002de:	220a      	movs	r2, #10
 80002e0:	705a      	strb	r2, [r3, #1]
      break;
 80002e2:	e020      	b.n	8000326 <Resume+0xea>
    case RESUME_ON:
    #ifndef STM32F10X_CL      
      ResumeS.bESOFcnt--;
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <Resume+0xf4>)
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	3b01      	subs	r3, #1
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <Resume+0xf4>)
 80002f0:	705a      	strb	r2, [r3, #1]
      if (ResumeS.bESOFcnt == 0)
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <Resume+0xf4>)
 80002f4:	785b      	ldrb	r3, [r3, #1]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d113      	bne.n	8000324 <Resume+0xe8>
      {
     #endif /* STM32F10X_CL */    
       #ifdef STM32F10X_CL
        OTGD_FS_ResetRemoteWakeup();
       #else
        wCNTR = _GetCNTR();
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <Resume+0xf8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	81fb      	strh	r3, [r7, #14]
        wCNTR &= (~CNTR_RESUME);
 8000302:	89fb      	ldrh	r3, [r7, #14]
 8000304:	f023 0310 	bic.w	r3, r3, #16
 8000308:	81fb      	strh	r3, [r7, #14]
        _SetCNTR(wCNTR);
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <Resume+0xf8>)
 800030c:	89fb      	ldrh	r3, [r7, #14]
 800030e:	6013      	str	r3, [r2, #0]
       #endif /* STM32F10X_CL */
        ResumeS.eState = RESUME_OFF;
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <Resume+0xf4>)
 8000312:	2206      	movs	r2, #6
 8000314:	701a      	strb	r2, [r3, #0]
     #ifndef STM32F10X_CL
      }
     #endif /* STM32F10X_CL */
      break;
 8000316:	e005      	b.n	8000324 <Resume+0xe8>
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <Resume+0xf4>)
 800031a:	2206      	movs	r2, #6
 800031c:	701a      	strb	r2, [r3, #0]
      break;
 800031e:	e002      	b.n	8000326 <Resume+0xea>
      break;
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
        ResumeS.eState = RESUME_START;
      break;
 8000320:	bf00      	nop
 8000322:	e000      	b.n	8000326 <Resume+0xea>
       #endif /* STM32F10X_CL */
        ResumeS.eState = RESUME_OFF;
     #ifndef STM32F10X_CL
      }
     #endif /* STM32F10X_CL */
      break;
 8000324:	bf00      	nop
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
      break;
  }
}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000144 	.word	0x20000144
 8000334:	40005c40 	.word	0x40005c40

08000338 <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800033c:	f000 fd1c 	bl	8000d78 <Get_SerialNum>

  pInformation->Current_Configuration = 0;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <Virtual_Com_Port_init+0x24>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2200      	movs	r2, #0
 8000346:	729a      	strb	r2, [r3, #10]

  /* Connect the device */
  PowerOn();
 8000348:	f7ff ff00 	bl	800014c <PowerOn>

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 800034c:	f000 fd7e 	bl	8000e4c <USB_SIL_Init>


  bDeviceState = UNCONNECTED;
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <Virtual_Com_Port_init+0x28>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200009cc 	.word	0x200009cc
 8000360:	20000128 	.word	0x20000128

08000364 <Virtual_Com_Port_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8000368:	4b37      	ldr	r3, [pc, #220]	; (8000448 <Virtual_Com_Port_Reset+0xe4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2200      	movs	r2, #0
 800036e:	729a      	strb	r2, [r3, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 8000370:	4b35      	ldr	r3, [pc, #212]	; (8000448 <Virtual_Com_Port_Reset+0xe4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a35      	ldr	r2, [pc, #212]	; (800044c <Virtual_Com_Port_Reset+0xe8>)
 8000376:	79d2      	ldrb	r2, [r2, #7]
 8000378:	725a      	strb	r2, [r3, #9]

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 800037a:	4b33      	ldr	r3, [pc, #204]	; (8000448 <Virtual_Com_Port_Reset+0xe4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2200      	movs	r2, #0
 8000380:	72da      	strb	r2, [r3, #11]

  /* Init EP3 OUT as Bulk endpoint */
  OTG_DEV_EP_Init(EP3_OUT, OTG_DEV_EP_TYPE_BULK, VIRTUAL_COM_PORT_DATA_SIZE);  
#else 

  SetBTABLE(BTABLE_ADDRESS);
 8000382:	2000      	movs	r0, #0
 8000384:	f000 fe26 	bl	8000fd4 <SetBTABLE>

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8000388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038c:	2000      	movs	r0, #0
 800038e:	f000 fe67 	bl	8001060 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8000392:	2110      	movs	r1, #16
 8000394:	2000      	movs	r0, #0
 8000396:	f000 fe9f 	bl	80010d8 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800039a:	2140      	movs	r1, #64	; 0x40
 800039c:	2000      	movs	r0, #0
 800039e:	f001 f9f1 	bl	8001784 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 80003a2:	2180      	movs	r1, #128	; 0x80
 80003a4:	2000      	movs	r0, #0
 80003a6:	f001 f9cd 	bl	8001744 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 fffa 	bl	80013a4 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <Virtual_Com_Port_Reset+0xec>)
 80003b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	4619      	mov	r1, r3
 80003ba:	2000      	movs	r0, #0
 80003bc:	f001 fa86 	bl	80018cc <SetEPRxCount>
  SetEPRxValid(ENDP0);
 80003c0:	2000      	movs	r0, #0
 80003c2:	f000 ff7d 	bl	80012c0 <SetEPRxValid>

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 80003c6:	2100      	movs	r1, #0
 80003c8:	2001      	movs	r0, #1
 80003ca:	f000 fe49 	bl	8001060 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 80003ce:	21c0      	movs	r1, #192	; 0xc0
 80003d0:	2001      	movs	r0, #1
 80003d2:	f001 f9b7 	bl	8001744 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 80003d6:	2120      	movs	r1, #32
 80003d8:	2001      	movs	r0, #1
 80003da:	f000 fe7d 	bl	80010d8 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 80003de:	2100      	movs	r1, #0
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 feb1 	bl	8001148 <SetEPRxStatus>

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 80003e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80003ea:	2002      	movs	r0, #2
 80003ec:	f000 fe38 	bl	8001060 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	2002      	movs	r0, #2
 80003f6:	f001 f9a5 	bl	8001744 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 80003fa:	2100      	movs	r1, #0
 80003fc:	2002      	movs	r0, #2
 80003fe:	f000 fea3 	bl	8001148 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 8000402:	2120      	movs	r1, #32
 8000404:	2002      	movs	r0, #2
 8000406:	f000 fe67 	bl	80010d8 <SetEPTxStatus>

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 800040a:	2100      	movs	r1, #0
 800040c:	2003      	movs	r0, #3
 800040e:	f000 fe27 	bl	8001060 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 8000412:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000416:	2003      	movs	r0, #3
 8000418:	f001 f9b4 	bl	8001784 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800041c:	2140      	movs	r1, #64	; 0x40
 800041e:	2003      	movs	r0, #3
 8000420:	f001 fa54 	bl	80018cc <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 8000424:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000428:	2003      	movs	r0, #3
 800042a:	f000 fe8d 	bl	8001148 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800042e:	2100      	movs	r1, #0
 8000430:	2003      	movs	r0, #3
 8000432:	f000 fe51 	bl	80010d8 <SetEPTxStatus>

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 8000436:	2000      	movs	r0, #0
 8000438:	f002 ff60 	bl	80032fc <SetDeviceAddress>
#endif /* STM32F10X_CL */

  bDeviceState = ATTACHED;
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <Virtual_Com_Port_Reset+0xf0>)
 800043e:	2201      	movs	r2, #1
 8000440:	601a      	str	r2, [r3, #0]
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	200009cc 	.word	0x200009cc
 800044c:	08004390 	.word	0x08004390
 8000450:	2000000c 	.word	0x2000000c
 8000454:	20000128 	.word	0x20000128

08000458 <Virtual_Com_Port_SetConfiguration>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
  DEVICE_INFO *pInfo = &Device_Info;
 800045e:	4b07      	ldr	r3, [pc, #28]	; (800047c <Virtual_Com_Port_SetConfiguration+0x24>)
 8000460:	607b      	str	r3, [r7, #4]

  if (pInfo->Current_Configuration != 0)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	7a9b      	ldrb	r3, [r3, #10]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <Virtual_Com_Port_SetConfiguration+0x18>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <Virtual_Com_Port_SetConfiguration+0x28>)
 800046c:	2205      	movs	r2, #5
 800046e:	601a      	str	r2, [r3, #0]
  }
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	200009ac 	.word	0x200009ac
 8000480:	20000128 	.word	0x20000128

08000484 <Virtual_Com_Port_SetDeviceAddress>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  bDeviceState = ADDRESSED;
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <Virtual_Com_Port_SetDeviceAddress+0x14>)
 800048a:	2204      	movs	r2, #4
 800048c:	601a      	str	r2, [r3, #0]
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000128 	.word	0x20000128

0800049c <Virtual_Com_Port_Status_In>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  if (Request == SET_LINE_CODING)
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <Virtual_Com_Port_Status_In+0x1c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b20      	cmp	r3, #32
 80004a6:	d102      	bne.n	80004ae <Virtual_Com_Port_Status_In+0x12>
  {
    Request = 0;
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <Virtual_Com_Port_Status_In+0x1c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
  }
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c

080004bc <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <Virtual_Com_Port_Data_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]

  if (RequestNo == GET_LINE_CODING)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b21      	cmp	r3, #33	; 0x21
 80004da:	d109      	bne.n	80004f0 <Virtual_Com_Port_Data_Setup+0x28>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <Virtual_Com_Port_Data_Setup+0x70>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004e6:	2b21      	cmp	r3, #33	; 0x21
 80004e8:	d111      	bne.n	800050e <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <Virtual_Com_Port_Data_Setup+0x74>)
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	e00e      	b.n	800050e <Virtual_Com_Port_Data_Setup+0x46>
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b20      	cmp	r3, #32
 80004f4:	d10b      	bne.n	800050e <Virtual_Com_Port_Data_Setup+0x46>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <Virtual_Com_Port_Data_Setup+0x70>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000500:	2b21      	cmp	r3, #33	; 0x21
 8000502:	d101      	bne.n	8000508 <Virtual_Com_Port_Data_Setup+0x40>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <Virtual_Com_Port_Data_Setup+0x78>)
 8000506:	60fb      	str	r3, [r7, #12]
    }
    Request = SET_LINE_CODING;
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <Virtual_Com_Port_Data_Setup+0x7c>)
 800050a:	2220      	movs	r2, #32
 800050c:	701a      	strb	r2, [r3, #0]
  }

  if (CopyRoutine == NULL)
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d101      	bne.n	8000518 <Virtual_Com_Port_Data_Setup+0x50>
  {
    return USB_UNSUPPORT;
 8000514:	2302      	movs	r3, #2
 8000516:	e00b      	b.n	8000530 <Virtual_Com_Port_Data_Setup+0x68>
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <Virtual_Com_Port_Data_Setup+0x70>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	619a      	str	r2, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <Virtual_Com_Port_Data_Setup+0x70>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2200      	movs	r2, #0
 8000526:	825a      	strh	r2, [r3, #18]
  (*CopyRoutine)(0);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2000      	movs	r0, #0
 800052c:	4798      	blx	r3
  return USB_SUCCESS;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200009cc 	.word	0x200009cc
 800053c:	0800063d 	.word	0x0800063d
 8000540:	0800066d 	.word	0x0800066d
 8000544:	2000012c 	.word	0x2000012c

08000548 <Virtual_Com_Port_NoData_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <Virtual_Com_Port_NoData_Setup+0x38>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800055c:	2b21      	cmp	r3, #33	; 0x21
 800055e:	d109      	bne.n	8000574 <Virtual_Com_Port_NoData_Setup+0x2c>
  {
    if (RequestNo == SET_COMM_FEATURE)
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b02      	cmp	r3, #2
 8000564:	d101      	bne.n	800056a <Virtual_Com_Port_NoData_Setup+0x22>
    {
      return USB_SUCCESS;
 8000566:	2300      	movs	r3, #0
 8000568:	e005      	b.n	8000576 <Virtual_Com_Port_NoData_Setup+0x2e>
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b22      	cmp	r3, #34	; 0x22
 800056e:	d101      	bne.n	8000574 <Virtual_Com_Port_NoData_Setup+0x2c>
    {
      return USB_SUCCESS;
 8000570:	2300      	movs	r3, #0
 8000572:	e000      	b.n	8000576 <Virtual_Com_Port_NoData_Setup+0x2e>
    }
  }

  return USB_UNSUPPORT;
 8000574:	2302      	movs	r3, #2
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	200009cc 	.word	0x200009cc

08000584 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	4904      	ldr	r1, [pc, #16]	; (80005a4 <Virtual_Com_Port_GetDeviceDescriptor+0x20>)
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fa16 	bl	80029c4 <Standard_GetDescriptorData>
 8000598:	4603      	mov	r3, r0
}
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000060 	.word	0x20000060

080005a8 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	80fb      	strh	r3, [r7, #6]
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	4904      	ldr	r1, [pc, #16]	; (80005c8 <Virtual_Com_Port_GetConfigDescriptor+0x20>)
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fa04 	bl	80029c4 <Standard_GetDescriptorData>
 80005bc:	4603      	mov	r3, r0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000068 	.word	0x20000068

080005cc <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  uint8_t wValue0 = pInformation->USBwValue0;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <Virtual_Com_Port_GetStringDescriptor+0x38>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	78db      	ldrb	r3, [r3, #3]
 80005dc:	73fb      	strb	r3, [r7, #15]
  if (wValue0 > 4)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d901      	bls.n	80005e8 <Virtual_Com_Port_GetStringDescriptor+0x1c>
  {
    return NULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	e009      	b.n	80005fc <Virtual_Com_Port_GetStringDescriptor+0x30>
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <Virtual_Com_Port_GetStringDescriptor+0x3c>)
 80005ee:	441a      	add	r2, r3
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	4611      	mov	r1, r2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 f9e5 	bl	80029c4 <Standard_GetDescriptorData>
 80005fa:	4603      	mov	r3, r0
  }
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200009cc 	.word	0x200009cc
 8000608:	20000070 	.word	0x20000070

0800060c <Virtual_Com_Port_Get_Interface_Setting>:
* Input2         : uint8_t: AlternateSetting : Alternate Setting number.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
  if (AlternateSetting > 0)
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <Virtual_Com_Port_Get_Interface_Setting+0x1a>
  {
    return USB_UNSUPPORT;
 8000622:	2302      	movs	r3, #2
 8000624:	e005      	b.n	8000632 <Virtual_Com_Port_Get_Interface_Setting+0x26>
  }
  else if (Interface > 1)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d901      	bls.n	8000630 <Virtual_Com_Port_Get_Interface_Setting+0x24>
  {
    return USB_UNSUPPORT;
 800062c:	2302      	movs	r3, #2
 800062e:	e000      	b.n	8000632 <Virtual_Com_Port_Get_Interface_Setting+0x26>
  }
  return USB_SUCCESS;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <Virtual_Com_Port_GetLineCoding>:
* Input          : Length.
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d105      	bne.n	8000658 <Virtual_Com_Port_GetLineCoding+0x1c>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <Virtual_Com_Port_GetLineCoding+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2208      	movs	r2, #8
 8000652:	821a      	strh	r2, [r3, #16]
    return NULL;
 8000654:	2300      	movs	r3, #0
 8000656:	e000      	b.n	800065a <Virtual_Com_Port_GetLineCoding+0x1e>
  }
  return(uint8_t *)&linecoding;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <Virtual_Com_Port_GetLineCoding+0x2c>)
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	200009cc 	.word	0x200009cc
 8000668:	20000000 	.word	0x20000000

0800066c <Virtual_Com_Port_SetLineCoding>:
* Input          : Length.
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d105      	bne.n	8000688 <Virtual_Com_Port_SetLineCoding+0x1c>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <Virtual_Com_Port_SetLineCoding+0x28>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2208      	movs	r2, #8
 8000682:	821a      	strh	r2, [r3, #16]
    return NULL;
 8000684:	2300      	movs	r3, #0
 8000686:	e000      	b.n	800068a <Virtual_Com_Port_SetLineCoding+0x1e>
  }
  return(uint8_t *)&linecoding;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <Virtual_Com_Port_SetLineCoding+0x2c>)
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	200009cc 	.word	0x200009cc
 8000698:	20000000 	.word	0x20000000

0800069c <USB_Istr>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void USB_Istr(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  wIstr = _GetISTR();
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <USB_Istr+0x7c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <USB_Istr+0x80>)
 80006a8:	801a      	strh	r2, [r3, #0]

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <USB_Istr+0x80>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006b4:	4a1a      	ldr	r2, [pc, #104]	; (8000720 <USB_Istr+0x84>)
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	4013      	ands	r3, r2
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00c      	beq.n	80006d8 <USB_Istr+0x3c>
  {
    _SetISTR((uint16_t)CLR_SOF);
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <USB_Istr+0x7c>)
 80006c0:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 80006c4:	601a      	str	r2, [r3, #0]
    bIntPackSOF++;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <USB_Istr+0x88>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	3301      	adds	r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <USB_Istr+0x88>)
 80006d2:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 80006d4:	f000 f892 	bl	80007fc <SOF_Callback>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <USB_Istr+0x80>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006e2:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <USB_Istr+0x84>)
 80006e4:	8812      	ldrh	r2, [r2, #0]
 80006e6:	4013      	ands	r3, r2
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <USB_Istr+0x54>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 80006ec:	f001 fc94 	bl	8002018 <CTR_LP>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <USB_Istr+0x80>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006fa:	4a09      	ldr	r2, [pc, #36]	; (8000720 <USB_Istr+0x84>)
 80006fc:	8812      	ldrh	r2, [r2, #0]
 80006fe:	4013      	ands	r3, r2
 8000700:	2b00      	cmp	r3, #0
 8000702:	d006      	beq.n	8000712 <USB_Istr+0x76>
  {
    _SetISTR((uint16_t)CLR_RESET);
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <USB_Istr+0x7c>)
 8000706:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 800070a:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <USB_Istr+0x8c>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40005c44 	.word	0x40005c44
 800071c:	20000146 	.word	0x20000146
 8000720:	200009d0 	.word	0x200009d0
 8000724:	2000012d 	.word	0x2000012d
 8000728:	2000000c 	.word	0x2000000c

0800072c <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <EP1_IN_Callback+0x90>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d13b      	bne.n	80007b2 <EP1_IN_Callback+0x86>
  {
    if (USART_Rx_length == 0) 
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <EP1_IN_Callback+0x94>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d103      	bne.n	800074a <EP1_IN_Callback+0x1e>
    {
      USB_Tx_State = 0;
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <EP1_IN_Callback+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
      SetEPTxCount(ENDP1, USB_Tx_length);
      SetEPTxValid(ENDP1); 
#endif  
    }
  }
}
 8000748:	e033      	b.n	80007b2 <EP1_IN_Callback+0x86>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <EP1_IN_Callback+0x94>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b40      	cmp	r3, #64	; 0x40
 8000750:	d90f      	bls.n	8000772 <EP1_IN_Callback+0x46>
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <EP1_IN_Callback+0x98>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	80fb      	strh	r3, [r7, #6]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8000758:	2340      	movs	r3, #64	; 0x40
 800075a:	80bb      	strh	r3, [r7, #4]
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <EP1_IN_Callback+0x98>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3340      	adds	r3, #64	; 0x40
 8000762:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <EP1_IN_Callback+0x98>)
 8000764:	6013      	str	r3, [r2, #0]
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <EP1_IN_Callback+0x94>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3b40      	subs	r3, #64	; 0x40
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <EP1_IN_Callback+0x94>)
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	e00f      	b.n	8000792 <EP1_IN_Callback+0x66>
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <EP1_IN_Callback+0x98>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	80fb      	strh	r3, [r7, #6]
        USB_Tx_length = USART_Rx_length;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <EP1_IN_Callback+0x94>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	80bb      	strh	r3, [r7, #4]
        
        USART_Rx_ptr_out += USART_Rx_length;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <EP1_IN_Callback+0x98>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <EP1_IN_Callback+0x94>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <EP1_IN_Callback+0x98>)
 800078a:	6013      	str	r3, [r2, #0]
        USART_Rx_length = 0;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <EP1_IN_Callback+0x94>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
      }
      
#ifdef USE_STM3210C_EVAL
      USB_SIL_Write(EP1_IN, &USART_Rx_Buffer[USB_Tx_ptr], USB_Tx_length);  
#else
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <EP1_IN_Callback+0x9c>)
 8000796:	4413      	add	r3, r2
 8000798:	88ba      	ldrh	r2, [r7, #4]
 800079a:	21c0      	movs	r1, #192	; 0xc0
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fbd3 	bl	8001f48 <UserToPMABufferCopy>
      SetEPTxCount(ENDP1, USB_Tx_length);
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	4619      	mov	r1, r3
 80007a6:	2001      	movs	r0, #1
 80007a8:	f001 f840 	bl	800182c <SetEPTxCount>
      SetEPTxValid(ENDP1); 
 80007ac:	2001      	movs	r0, #1
 80007ae:	f000 fd5d 	bl	800126c <SetEPTxValid>
#endif  
    }
  }
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000140 	.word	0x20000140
 80007c0:	2000013c 	.word	0x2000013c
 80007c4:	20000138 	.word	0x20000138
 80007c8:	2000018c 	.word	0x2000018c

080007cc <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 80007d2:	4909      	ldr	r1, [pc, #36]	; (80007f8 <EP3_OUT_Callback+0x2c>)
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 fb77 	bl	8000ec8 <USB_SIL_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  HandleDataFromUSB(USB_Rx_Buffer, USB_Rx_Cnt);
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4619      	mov	r1, r3
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <EP3_OUT_Callback+0x2c>)
 80007e6:	f000 fa2d 	bl	8000c44 <HandleDataFromUSB>
  
#ifndef STM32F10X_CL
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 80007ea:	2003      	movs	r0, #3
 80007ec:	f000 fd68 	bl	80012c0 <SetEPRxValid>
#endif /* STM32F10X_CL */
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000148 	.word	0x20000148

080007fc <SOF_Callback>:
#ifdef STM32F10X_CL
void INTR_SOFINTR_Callback(void)
#else
void SOF_Callback(void)
#endif /* STM32F10X_CL */
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <SOF_Callback+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b05      	cmp	r3, #5
 8000806:	d10b      	bne.n	8000820 <SOF_Callback+0x24>
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <SOF_Callback+0x2c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	4906      	ldr	r1, [pc, #24]	; (8000828 <SOF_Callback+0x2c>)
 8000810:	600a      	str	r2, [r1, #0]
 8000812:	2b05      	cmp	r3, #5
 8000814:	d104      	bne.n	8000820 <SOF_Callback+0x24>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <SOF_Callback+0x2c>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 800081c:	f000 fa34 	bl	8000c88 <Handle_USBAsynchXfer>
    }
  }  
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000128 	.word	0x20000128
 8000828:	20000130 	.word	0x20000130

0800082c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000830:	4a15      	ldr	r2, [pc, #84]	; (8000888 <SystemInit+0x5c>)
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <SystemInit+0x5c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800083c:	4912      	ldr	r1, [pc, #72]	; (8000888 <SystemInit+0x5c>)
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <SystemInit+0x5c>)
 8000840:	685a      	ldr	r2, [r3, #4]
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <SystemInit+0x60>)
 8000844:	4013      	ands	r3, r2
 8000846:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000848:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <SystemInit+0x5c>)
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <SystemInit+0x5c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000856:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <SystemInit+0x5c>)
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <SystemInit+0x5c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000862:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000864:	4a08      	ldr	r2, [pc, #32]	; (8000888 <SystemInit+0x5c>)
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <SystemInit+0x5c>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800086e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <SystemInit+0x5c>)
 8000872:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000876:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000878:	f000 f878 	bl	800096c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <SystemInit+0x64>)
 800087e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000882:	609a      	str	r2, [r3, #8]
#endif 
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	f8ff0000 	.word	0xf8ff0000
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008a6:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <SystemCoreClockUpdate+0xc4>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f003 030c 	and.w	r3, r3, #12
 80008ae:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	d007      	beq.n	80008c6 <SystemCoreClockUpdate+0x32>
 80008b6:	2b08      	cmp	r3, #8
 80008b8:	d009      	beq.n	80008ce <SystemCoreClockUpdate+0x3a>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d133      	bne.n	8000926 <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <SystemCoreClockUpdate+0xc8>)
 80008c0:	4a27      	ldr	r2, [pc, #156]	; (8000960 <SystemCoreClockUpdate+0xcc>)
 80008c2:	601a      	str	r2, [r3, #0]
      break;
 80008c4:	e033      	b.n	800092e <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <SystemCoreClockUpdate+0xc8>)
 80008c8:	4a25      	ldr	r2, [pc, #148]	; (8000960 <SystemCoreClockUpdate+0xcc>)
 80008ca:	601a      	str	r2, [r3, #0]
      break;
 80008cc:	e02f      	b.n	800092e <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <SystemCoreClockUpdate+0xc4>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80008d6:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <SystemCoreClockUpdate+0xc4>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008e0:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	0c9b      	lsrs	r3, r3, #18
 80008e6:	3302      	adds	r3, #2
 80008e8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d106      	bne.n	80008fe <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <SystemCoreClockUpdate+0xd0>)
 80008f4:	fb02 f303 	mul.w	r3, r2, r3
 80008f8:	4a18      	ldr	r2, [pc, #96]	; (800095c <SystemCoreClockUpdate+0xc8>)
 80008fa:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80008fc:	e017      	b.n	800092e <SystemCoreClockUpdate+0x9a>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <SystemCoreClockUpdate+0xc4>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d006      	beq.n	8000918 <SystemCoreClockUpdate+0x84>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	4a15      	ldr	r2, [pc, #84]	; (8000964 <SystemCoreClockUpdate+0xd0>)
 800090e:	fb02 f303 	mul.w	r3, r2, r3
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <SystemCoreClockUpdate+0xc8>)
 8000914:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000916:	e00a      	b.n	800092e <SystemCoreClockUpdate+0x9a>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <SystemCoreClockUpdate+0xcc>)
 800091c:	fb02 f303 	mul.w	r3, r2, r3
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <SystemCoreClockUpdate+0xc8>)
 8000922:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000924:	e003      	b.n	800092e <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <SystemCoreClockUpdate+0xc8>)
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <SystemCoreClockUpdate+0xcc>)
 800092a:	601a      	str	r2, [r3, #0]
      break;
 800092c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <SystemCoreClockUpdate+0xc4>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000936:	091b      	lsrs	r3, r3, #4
 8000938:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <SystemCoreClockUpdate+0xd4>)
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <SystemCoreClockUpdate+0xc8>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	fa22 f303 	lsr.w	r3, r2, r3
 800094a:	4a04      	ldr	r2, [pc, #16]	; (800095c <SystemCoreClockUpdate+0xc8>)
 800094c:	6013      	str	r3, [r2, #0]
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	40021000 	.word	0x40021000
 800095c:	200000e4 	.word	0x200000e4
 8000960:	007a1200 	.word	0x007a1200
 8000964:	003d0900 	.word	0x003d0900
 8000968:	200000e8 	.word	0x200000e8

0800096c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000970:	f000 f802 	bl	8000978 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000986:	4a3a      	ldr	r2, [pc, #232]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000988:	4b39      	ldr	r3, [pc, #228]	; (8000a70 <SetSysClockTo72+0xf8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000990:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000992:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3301      	adds	r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d103      	bne.n	80009b0 <SetSysClockTo72+0x38>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80009ae:	d1f0      	bne.n	8000992 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80009b0:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <SetSysClockTo72+0xf8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d002      	beq.n	80009c2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80009bc:	2301      	movs	r3, #1
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	e001      	b.n	80009c6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d14b      	bne.n	8000a64 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80009cc:	4a29      	ldr	r2, [pc, #164]	; (8000a74 <SetSysClockTo72+0xfc>)
 80009ce:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <SetSysClockTo72+0xfc>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <SetSysClockTo72+0xfc>)
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <SetSysClockTo72+0xfc>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f023 0303 	bic.w	r3, r3, #3
 80009e2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80009e4:	4a23      	ldr	r2, [pc, #140]	; (8000a74 <SetSysClockTo72+0xfc>)
 80009e6:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <SetSysClockTo72+0xfc>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80009f0:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <SetSysClockTo72+0xf8>)
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <SetSysClockTo72+0xf8>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <SetSysClockTo72+0xf8>)
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <SetSysClockTo72+0xf8>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000a0c:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000a16:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000a18:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000a22:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a2e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000a30:	bf00      	nop
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f9      	beq.n	8000a32 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f023 0303 	bic.w	r3, r3, #3
 8000a48:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000a56:	bf00      	nop
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SetSysClockTo72+0xf8>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 030c 	and.w	r3, r3, #12
 8000a60:	2b08      	cmp	r3, #8
 8000a62:	d1f9      	bne.n	8000a58 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40022000 	.word	0x40022000

08000a78 <NMI_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <HardFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000a88:	e7fe      	b.n	8000a88 <HardFault_Handler+0x4>
 8000a8a:	bf00      	nop

08000a8c <MemManage_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>
 8000a92:	bf00      	nop

08000a94 <BusFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000a98:	e7fe      	b.n	8000a98 <BusFault_Handler+0x4>
 8000a9a:	bf00      	nop

08000a9c <UsageFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>
 8000aa2:	bf00      	nop

08000aa4 <SVC_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVC_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <DebugMon_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMon_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <USB_LP_CAN1_RX0_IRQHandler>:
#if defined(STM32L1XX_MD) || defined(STM32L1XX_HD)|| defined(STM32L1XX_MD_PLUS)
void USB_LP_IRQHandler(void)
#else
void USB_LP_CAN1_RX0_IRQHandler(void)
#endif
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  USB_Istr();
 8000ad8:	f7ff fde0 	bl	800069c <USB_Istr>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <relaysInit>:
#include "relays.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"

void relaysInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	2004      	movs	r0, #4
 8000aea:	f002 ff17 	bl	800391c <RCC_APB2PeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = 0x3FF;
 8000aee:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000af2:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8000af4:	2310      	movs	r3, #16
 8000af6:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000af8:	2302      	movs	r3, #2
 8000afa:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <relaysInit+0x38>)
 8000b02:	f003 f8a3 	bl	8003c4c <GPIO_Init>

	GPIO_ResetBits(GPIOA, 0x3FF);
 8000b06:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <relaysInit+0x38>)
 8000b0c:	f003 f9c8 	bl	8003ea0 <GPIO_ResetBits>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40010800 	.word	0x40010800

08000b1c <relaysOff>:


void relaysOff(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	GPIO_ResetBits(GPIOA, 0x3FF);
 8000b20:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <relaysOff+0x14>)
 8000b26:	f003 f9bb 	bl	8003ea0 <GPIO_ResetBits>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40010800 	.word	0x40010800

08000b34 <relayOn>:

void relayOn(uint8_t relayNumber)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	relaysOff();
 8000b3e:	f7ff ffed 	bl	8000b1c <relaysOff>
	// At this point it needs a delay of ~2ms

	if(relayNumber <= 10 && relayNumber >= 1)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b0a      	cmp	r3, #10
 8000b46:	d80e      	bhi.n	8000b66 <relayOn+0x32>
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00b      	beq.n	8000b66 <relayOn+0x32>
	{
		uint8_t gpioPinNumber = relayNumber -1;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
		GPIO_SetBits(GPIOA, (1<<gpioPinNumber));
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2201      	movs	r2, #1
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4803      	ldr	r0, [pc, #12]	; (8000b70 <relayOn+0x3c>)
 8000b62:	f003 f98f 	bl	8003e84 <GPIO_SetBits>
	}
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40010800 	.word	0x40010800

08000b74 <main>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  Set_System();
 8000b78:	f000 f80a 	bl	8000b90 <Set_System>
  Set_USBClock();
 8000b7c:	f000 f80e 	bl	8000b9c <Set_USBClock>
  USB_Interrupts_Config();
 8000b80:	f000 f83e 	bl	8000c00 <USB_Interrupts_Config>
  USB_Init();
 8000b84:	f001 fc34 	bl	80023f0 <USB_Init>
  
  relaysInit();
 8000b88:	f7ff ffaa 	bl	8000ae0 <relaysInit>

  while (1)
  {
  }
 8000b8c:	e7fe      	b.n	8000b8c <main+0x18>
 8000b8e:	bf00      	nop

08000b90 <Set_System>:
* Description    : Configures Main system clocks & power
* Input          : None.
* Return         : None.
*******************************************************************************/
void Set_System(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
   
   
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <Set_USBClock>:
* Description    : Configures USB Clock input (48MHz)
* Input          : None.
* Return         : None.
*******************************************************************************/
void Set_USBClock(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* Select USBCLK source */
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f002 fd71 	bl	8003688 <RCC_USBCLKConfig>
  
  /* Enable the USB clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000bac:	f002 fed4 	bl	8003958 <RCC_APB1PeriphClockCmd>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <Enter_LowPowerMode>:
* Description    : Power-off system clocks and power while entering suspend mode
* Input          : None.
* Return         : None.
*******************************************************************************/
void Enter_LowPowerMode(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* Set the device state to suspend */
  bDeviceState = SUSPENDED;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <Enter_LowPowerMode+0x14>)
 8000bba:	2203      	movs	r2, #3
 8000bbc:	601a      	str	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000128 	.word	0x20000128

08000bcc <Leave_LowPowerMode>:
* Description    : Restores system clocks and power while exiting suspend mode
* Input          : None.
* Return         : None.
*******************************************************************************/
void Leave_LowPowerMode(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
  DEVICE_INFO *pInfo = &Device_Info;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <Leave_LowPowerMode+0x2c>)
 8000bd4:	607b      	str	r3, [r7, #4]

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	7a9b      	ldrb	r3, [r3, #10]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <Leave_LowPowerMode+0x1a>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <Leave_LowPowerMode+0x30>)
 8000be0:	2205      	movs	r2, #5
 8000be2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    bDeviceState = ATTACHED;
  }
}
 8000be4:	e002      	b.n	8000bec <Leave_LowPowerMode+0x20>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <Leave_LowPowerMode+0x30>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
  }
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200009ac 	.word	0x200009ac
 8000bfc:	20000128 	.word	0x20000128

08000c00 <USB_Interrupts_Config>:
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef NVIC_InitStructure;

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8000c06:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000c0a:	f003 fa95 	bl	8004138 <NVIC_PriorityGroupConfig>

  NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 8000c0e:	2314      	movs	r3, #20
 8000c10:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fa9b 	bl	800415c <NVIC_Init>


}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop

08000c30 <USB_Cable_Config>:
* Description    : Software Connection/Disconnection of USB Cable
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (FunctionalState NewState)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]

}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <HandleDataFromUSB>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void HandleDataFromUSB(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
  if(Nb_bytes > 0)
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d013      	beq.n	8000c7e <HandleDataFromUSB+0x3a>
  {
	  if(*data_buffer >= 1 && *data_buffer <= 10)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d009      	beq.n	8000c72 <HandleDataFromUSB+0x2e>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b0a      	cmp	r3, #10
 8000c64:	d805      	bhi.n	8000c72 <HandleDataFromUSB+0x2e>
	  {
		  relayOn(*data_buffer);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff62 	bl	8000b34 <relayOn>
	  } else if(*data_buffer == 0) {
		  relaysOff();
	  }
  }

}
 8000c70:	e005      	b.n	8000c7e <HandleDataFromUSB+0x3a>
  if(Nb_bytes > 0)
  {
	  if(*data_buffer >= 1 && *data_buffer <= 10)
	  {
		  relayOn(*data_buffer);
	  } else if(*data_buffer == 0) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HandleDataFromUSB+0x3a>
		  relaysOff();
 8000c7a:	f7ff ff4f 	bl	8000b1c <relaysOff>
	  }
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop

08000c88 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8000c8e:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <Handle_USBAsynchXfer+0xd0>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d05c      	beq.n	8000d50 <Handle_USBAsynchXfer+0xc8>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c9e:	d102      	bne.n	8000ca6 <Handle_USBAsynchXfer+0x1e>
    {
      USART_Rx_ptr_out = 0;
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <Handle_USBAsynchXfer+0xd8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d103      	bne.n	8000cba <Handle_USBAsynchXfer+0x32>
    {
      USB_Tx_State = 0; 
 8000cb2:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <Handle_USBAsynchXfer+0xd0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
      return;
 8000cb8:	e04a      	b.n	8000d50 <Handle_USBAsynchXfer+0xc8>
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 8000cba:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <Handle_USBAsynchXfer+0xd8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d906      	bls.n	8000cd4 <Handle_USBAsynchXfer+0x4c>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8000cc6:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000cce:	4a25      	ldr	r2, [pc, #148]	; (8000d64 <Handle_USBAsynchXfer+0xdc>)
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	e006      	b.n	8000ce2 <Handle_USBAsynchXfer+0x5a>
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <Handle_USBAsynchXfer+0xd8>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	4a21      	ldr	r2, [pc, #132]	; (8000d64 <Handle_USBAsynchXfer+0xdc>)
 8000ce0:	6013      	str	r3, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <Handle_USBAsynchXfer+0xdc>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b40      	cmp	r3, #64	; 0x40
 8000ce8:	d90f      	bls.n	8000d0a <Handle_USBAsynchXfer+0x82>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8000cf0:	2340      	movs	r3, #64	; 0x40
 8000cf2:	80bb      	strh	r3, [r7, #4]
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3340      	adds	r3, #64	; 0x40
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000cfc:	6013      	str	r3, [r2, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <Handle_USBAsynchXfer+0xdc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3b40      	subs	r3, #64	; 0x40
 8000d04:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <Handle_USBAsynchXfer+0xdc>)
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e00f      	b.n	8000d2a <Handle_USBAsynchXfer+0xa2>
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = USART_Rx_length;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <Handle_USBAsynchXfer+0xdc>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	80bb      	strh	r3, [r7, #4]
      
      USART_Rx_ptr_out += USART_Rx_length;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <Handle_USBAsynchXfer+0xdc>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <Handle_USBAsynchXfer+0xd4>)
 8000d22:	6013      	str	r3, [r2, #0]
      USART_Rx_length = 0;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <Handle_USBAsynchXfer+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1; 
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <Handle_USBAsynchXfer+0xd0>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
    
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <Handle_USBAsynchXfer+0xe0>)
 8000d34:	4413      	add	r3, r2
 8000d36:	88ba      	ldrh	r2, [r7, #4]
 8000d38:	21c0      	movs	r1, #192	; 0xc0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 f904 	bl	8001f48 <UserToPMABufferCopy>
    SetEPTxCount(ENDP1, USB_Tx_length);
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	4619      	mov	r1, r3
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 fd71 	bl	800182c <SetEPTxCount>
    SetEPTxValid(ENDP1); 
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f000 fa8e 	bl	800126c <SetEPTxValid>
  }  
  
}
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000140 	.word	0x20000140
 8000d5c:	20000138 	.word	0x20000138
 8000d60:	20000134 	.word	0x20000134
 8000d64:	2000013c 	.word	0x2000013c
 8000d68:	2000018c 	.word	0x2000018c

08000d6c <USART_To_USB_Send_Data>:
* Description    : send the received data from UART 0 to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void USART_To_USB_Send_Data(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
//  /* To avoid buffer overflow */
//  if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
//  {
//    USART_Rx_ptr_in = 0;
//  }
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(__IO uint32_t*)(0x1FFFF7E8);
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <Get_SerialNum+0x44>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	60fb      	str	r3, [r7, #12]
  Device_Serial1 = *(__IO uint32_t*)(0x1FFFF7EC);
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <Get_SerialNum+0x48>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60bb      	str	r3, [r7, #8]
  Device_Serial2 = *(__IO uint32_t*)(0x1FFFF7F0);
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <Get_SerialNum+0x4c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	607b      	str	r3, [r7, #4]

  Device_Serial0 += Device_Serial2;
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

  if (Device_Serial0 != 0)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d009      	beq.n	8000db2 <Get_SerialNum+0x3a>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 8000d9e:	2208      	movs	r2, #8
 8000da0:	4909      	ldr	r1, [pc, #36]	; (8000dc8 <Get_SerialNum+0x50>)
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f814 	bl	8000dd0 <IntToUnicode>
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 8000da8:	2204      	movs	r2, #4
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <Get_SerialNum+0x54>)
 8000dac:	68b8      	ldr	r0, [r7, #8]
 8000dae:	f000 f80f 	bl	8000dd0 <IntToUnicode>
  }
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	1ffff7e8 	.word	0x1ffff7e8
 8000dc0:	1ffff7ec 	.word	0x1ffff7ec
 8000dc4:	1ffff7f0 	.word	0x1ffff7f0
 8000dc8:	200000ca 	.word	0x200000ca
 8000dcc:	200000da 	.word	0x200000da

08000dd0 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	75fb      	strb	r3, [r7, #23]
  
  for( idx = 0 ; idx < len ; idx ++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	75fb      	strb	r3, [r7, #23]
 8000de6:	e027      	b.n	8000e38 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	0f1b      	lsrs	r3, r3, #28
 8000dec:	2b09      	cmp	r3, #9
 8000dee:	d80b      	bhi.n	8000e08 <IntToUnicode+0x38>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	461a      	mov	r2, r3
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	4413      	add	r3, r2
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	0f12      	lsrs	r2, r2, #28
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	3230      	adds	r2, #48	; 0x30
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e00a      	b.n	8000e1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	4413      	add	r3, r2
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	0f12      	lsrs	r2, r2, #28
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	3237      	adds	r2, #55	; 0x37
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	3301      	adds	r3, #1
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	3301      	adds	r3, #1
 8000e36:	75fb      	strb	r3, [r7, #23]
 8000e38:	7dfa      	ldrb	r2, [r7, #23]
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3d3      	bcc.n	8000de8 <IntToUnicode+0x18>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <USB_SIL_Init+0x24>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
  wInterrupt_Mask = IMR_MSK;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <USB_SIL_Init+0x28>)
 8000e58:	f44f 4206 	mov.w	r2, #34304	; 0x8600
 8000e5c:	801a      	strh	r2, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <USB_SIL_Init+0x2c>)
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <USB_SIL_Init+0x28>)
 8000e62:	8812      	ldrh	r2, [r2, #0]
 8000e64:	601a      	str	r2, [r3, #0]
  /* Perform OTG Device initialization procedure (including EP0 init) */
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40005c44 	.word	0x40005c44
 8000e74:	200009d0 	.word	0x200009d0
 8000e78:	40005c40 	.word	0x40005c40

08000e7c <USB_SIL_Write>:
*                  - wBufferSize: Number of data to be written (in bytes).
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Write(uint8_t bEpAddr, uint8_t* pBufferPointer, uint32_t wBufferSize)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	73fb      	strb	r3, [r7, #15]
#ifndef STM32F10X_CL

  /* Use the memory interface function to write to the selected endpoint */
  UserToPMABufferCopy(pBufferPointer, GetEPTxAddr(bEpAddr & 0x7F), wBufferSize);
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fc96 	bl	80017c4 <GetEPTxAddr>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68b8      	ldr	r0, [r7, #8]
 8000ea4:	f001 f850 	bl	8001f48 <UserToPMABufferCopy>

  /* Update the data length in the control register */
  SetEPTxCount((bEpAddr & 0x7F), wBufferSize);
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fcb8 	bl	800182c <SetEPTxCount>
   /* Use the PCD interface layer function to write to the selected endpoint */
   PCD_EP_Write (bEpAddr, pBufferPointer, wBufferSize); 
   
#endif /* STM32F10X_CL */

  return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop

08000ec8 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  uint32_t DataLength = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fd51 	bl	8001988 <GetEPRxCount>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	60fb      	str	r3, [r7, #12]
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fc80 	bl	80017f8 <GetEPRxAddr>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4619      	mov	r1, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	461a      	mov	r2, r3
 8000f02:	6838      	ldr	r0, [r7, #0]
 8000f04:	f001 f85a 	bl	8001fbc <PMAToUserBufferCopy>
  PCD_EP_Read (bEpAddr, pBufferPointer, DataLength);
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
 8000f08:	68fb      	ldr	r3, [r7, #12]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop

08000f14 <SetCNTR>:
* Input          : wRegValue: new register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetCNTR(uint16_t wRegValue)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
  _SetCNTR(wRegValue);
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <SetCNTR+0x1c>)
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40005c40 	.word	0x40005c40

08000f34 <GetCNTR>:
* Input          : None.
* Output         : None.
* Return         : CNTR register Value.
*******************************************************************************/
uint16_t GetCNTR(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return(_GetCNTR());
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <GetCNTR+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	b29b      	uxth	r3, r3
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40005c40 	.word	0x40005c40

08000f4c <SetISTR>:
* Input          : wRegValue: new register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetISTR(uint16_t wRegValue)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
  _SetISTR(wRegValue);
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <SetISTR+0x1c>)
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40005c44 	.word	0x40005c44

08000f6c <GetISTR>:
* Input          : None.
* Output         : None.
* Return         : ISTR register Value
*******************************************************************************/
uint16_t GetISTR(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return(_GetISTR());
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <GetISTR+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	b29b      	uxth	r3, r3
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40005c44 	.word	0x40005c44

08000f84 <GetFNR>:
* Input          : None.
* Output         : None.
* Return         : FNR register Value
*******************************************************************************/
uint16_t GetFNR(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return(_GetFNR());
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <GetFNR+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40005c48 	.word	0x40005c48

08000f9c <SetDADDR>:
* Input          : wRegValue: new register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDADDR(uint16_t wRegValue)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
  _SetDADDR(wRegValue);
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <SetDADDR+0x1c>)
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40005c4c 	.word	0x40005c4c

08000fbc <GetDADDR>:
* Input          : None.
* Output         : None.
* Return         : DADDR register Value
*******************************************************************************/
uint16_t GetDADDR(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return(_GetDADDR());
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <GetDADDR+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40005c4c 	.word	0x40005c4c

08000fd4 <SetBTABLE>:
* Input          : wRegValue: New register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
  _SetBTABLE(wRegValue);
 8000fde:	4905      	ldr	r1, [pc, #20]	; (8000ff4 <SetBTABLE+0x20>)
 8000fe0:	88fa      	ldrh	r2, [r7, #6]
 8000fe2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40005c50 	.word	0x40005c50

08000ff8 <GetBTABLE>:
* Input          : None. 
* Output         : None.
* Return         : BTABLE address.
*******************************************************************************/
uint16_t GetBTABLE(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return(_GetBTABLE());
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <GetBTABLE+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40005c50 	.word	0x40005c50

08001010 <SetENDPOINT>:
*                  wRegValue.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetENDPOINT(uint8_t bEpNum, uint16_t wRegValue)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	460a      	mov	r2, r1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	80bb      	strh	r3, [r7, #4]
  _SetENDPOINT(bEpNum, wRegValue);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001028:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800102c:	88ba      	ldrh	r2, [r7, #4]
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <GetENDPOINT>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Endpoint register value.
*******************************************************************************/
uint16_t GetENDPOINT(uint8_t bEpNum)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  return(_GetENDPOINT(bEpNum));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800104e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <SetEPType>:
*                  wType: type definition.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	460a      	mov	r2, r1
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	4613      	mov	r3, r2
 800106e:	80bb      	strh	r3, [r7, #4]
  _SetEPType(bEpNum, wType);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001078:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001084:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	b212      	sxth	r2, r2
 800108c:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8001090:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001094:	b211      	sxth	r1, r2
 8001096:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800109a:	430a      	orrs	r2, r1
 800109c:	b212      	sxth	r2, r2
 800109e:	b292      	uxth	r2, r2
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <GetEPType>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Endpoint Type
*******************************************************************************/
uint16_t GetEPType(uint8_t bEpNum)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  return(_GetEPType(bEpNum));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010be:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ca:	b29b      	uxth	r3, r3
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <SetEPTxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 80010d8:	b490      	push	{r4, r7}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	80bb      	strh	r3, [r7, #4]
  _SetEPTxStatus(bEpNum, wState);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010f0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80010fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001100:	b29c      	uxth	r4, r3
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	b29b      	uxth	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <SetEPTxStatus+0x3c>
 800110e:	f084 0310 	eor.w	r3, r4, #16
 8001112:	b29c      	uxth	r4, r3
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	b29b      	uxth	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <SetEPTxStatus+0x4e>
 8001120:	f084 0320 	eor.w	r3, r4, #32
 8001124:	b29c      	uxth	r4, r3
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800112e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <SetEPTxStatus+0x6c>)
 8001134:	4322      	orrs	r2, r4
 8001136:	b292      	uxth	r2, r2
 8001138:	601a      	str	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bc90      	pop	{r4, r7}
 8001142:	4770      	bx	lr
 8001144:	ffff8080 	.word	0xffff8080

08001148 <SetEPRxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8001148:	b490      	push	{r4, r7}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	80bb      	strh	r3, [r7, #4]
  _SetEPRxStatus(bEpNum, wState);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001160:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800116c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001170:	b29c      	uxth	r4, r3
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001178:	b29b      	uxth	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <SetEPRxStatus+0x3c>
 800117e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001182:	b29c      	uxth	r4, r3
 8001184:	88bb      	ldrh	r3, [r7, #4]
 8001186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800118a:	b29b      	uxth	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <SetEPRxStatus+0x4e>
 8001190:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001194:	b29c      	uxth	r4, r3
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800119e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <SetEPRxStatus+0x6c>)
 80011a4:	4322      	orrs	r2, r4
 80011a6:	b292      	uxth	r2, r2
 80011a8:	601a      	str	r2, [r3, #0]
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc90      	pop	{r4, r7}
 80011b2:	4770      	bx	lr
 80011b4:	ffff8080 	.word	0xffff8080

080011b8 <SetDouBleBuffEPStall>:
*                  bDir: Endpoint direction.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDouBleBuffEPStall(uint8_t bEpNum, uint8_t bDir)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
  uint16_t Endpoint_DTOG_Status;
  Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff36 	bl	800103c <GetENDPOINT>
 80011d0:	4603      	mov	r3, r0
 80011d2:	81fb      	strh	r3, [r7, #14]
  if (bDir == EP_DBUF_OUT)
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10a      	bne.n	80011f0 <SetDouBleBuffEPStall+0x38>
  { /* OUT double buffered endpoint */
    _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011e2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80011e6:	89fa      	ldrh	r2, [r7, #14]
 80011e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011ec:	601a      	str	r2, [r3, #0]
  }
  else if (bDir == EP_DBUF_IN)
  { /* IN double buffered endpoint */
    _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
  }
}
 80011ee:	e00c      	b.n	800120a <SetDouBleBuffEPStall+0x52>
  Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
  if (bDir == EP_DBUF_OUT)
  { /* OUT double buffered endpoint */
    _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
  }
  else if (bDir == EP_DBUF_IN)
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d109      	bne.n	800120a <SetDouBleBuffEPStall+0x52>
  { /* IN double buffered endpoint */
    _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011fe:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001202:	89fa      	ldrh	r2, [r7, #14]
 8001204:	f022 0210 	bic.w	r2, r2, #16
 8001208:	601a      	str	r2, [r3, #0]
  }
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop

08001214 <GetEPTxStatus>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Endpoint TX Status
*******************************************************************************/
uint16_t GetEPTxStatus(uint8_t bEpNum)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  return(_GetEPTxStatus(bEpNum));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001226:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001232:	b29b      	uxth	r3, r3
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <GetEPRxStatus>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Endpoint RX Status
*******************************************************************************/
uint16_t GetEPRxStatus(uint8_t bEpNum)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  return(_GetEPRxStatus(bEpNum));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001252:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	b29b      	uxth	r3, r3
 800125a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800125e:	b29b      	uxth	r3, r3
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <SetEPTxValid>:
* Input          : bEpNum: Endpoint Number.  
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
 800126c:	b490      	push	{r4, r7}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800127e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800128a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800128e:	b29c      	uxth	r4, r3
 8001290:	f084 0310 	eor.w	r3, r4, #16
 8001294:	b29c      	uxth	r4, r3
 8001296:	f084 0320 	eor.w	r3, r4, #32
 800129a:	b29c      	uxth	r4, r3
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012a4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <SetEPTxValid+0x50>)
 80012aa:	4322      	orrs	r2, r4
 80012ac:	b292      	uxth	r2, r2
 80012ae:	601a      	str	r2, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc90      	pop	{r4, r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	ffff8080 	.word	0xffff8080

080012c0 <SetEPRxValid>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
 80012c0:	b490      	push	{r4, r7}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012d2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012e2:	b29c      	uxth	r4, r3
 80012e4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80012e8:	b29c      	uxth	r4, r3
 80012ea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80012ee:	b29c      	uxth	r4, r3
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012f8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <SetEPRxValid+0x50>)
 80012fe:	4322      	orrs	r2, r4
 8001300:	b292      	uxth	r2, r2
 8001302:	601a      	str	r2, [r3, #0]
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bc90      	pop	{r4, r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	ffff8080 	.word	0xffff8080

08001314 <SetEP_KIND>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEP_KIND(uint8_t bEpNum)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  _SetEP_KIND(bEpNum);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001326:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800132a:	79fa      	ldrb	r2, [r7, #7]
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001332:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	b211      	sxth	r1, r2
 800133a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800133e:	400a      	ands	r2, r1
 8001340:	b211      	sxth	r1, r2
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <SetEP_KIND+0x44>)
 8001344:	430a      	orrs	r2, r1
 8001346:	b212      	sxth	r2, r2
 8001348:	b292      	uxth	r2, r2
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	ffff8180 	.word	0xffff8180

0800135c <ClearEP_KIND>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_KIND(uint8_t bEpNum)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  _ClearEP_KIND(bEpNum);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800136e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800137a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	b211      	sxth	r1, r2
 8001382:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001386:	400a      	ands	r2, r1
 8001388:	b211      	sxth	r1, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <ClearEP_KIND+0x44>)
 800138c:	430a      	orrs	r2, r1
 800138e:	b212      	sxth	r2, r2
 8001390:	b292      	uxth	r2, r2
 8001392:	601a      	str	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	ffff8080 	.word	0xffff8080

080013a4 <Clear_Status_Out>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  _ClearEP_KIND(bEpNum);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013b6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80013c2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	b211      	sxth	r1, r2
 80013ca:	f640 620f 	movw	r2, #3599	; 0xe0f
 80013ce:	400a      	ands	r2, r1
 80013d0:	b211      	sxth	r1, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <Clear_Status_Out+0x44>)
 80013d4:	430a      	orrs	r2, r1
 80013d6:	b212      	sxth	r2, r2
 80013d8:	b292      	uxth	r2, r2
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	ffff8080 	.word	0xffff8080

080013ec <Set_Status_Out>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Status_Out(uint8_t bEpNum)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  _SetEP_KIND(bEpNum);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013fe:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001402:	79fa      	ldrb	r2, [r7, #7]
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800140a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	b211      	sxth	r1, r2
 8001412:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001416:	400a      	ands	r2, r1
 8001418:	b211      	sxth	r1, r2
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <Set_Status_Out+0x44>)
 800141c:	430a      	orrs	r2, r1
 800141e:	b212      	sxth	r2, r2
 8001420:	b292      	uxth	r2, r2
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	ffff8180 	.word	0xffff8180

08001434 <SetEPDoubleBuff>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDoubleBuff(uint8_t bEpNum)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  _SetEP_KIND(bEpNum);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001446:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800144a:	79fa      	ldrb	r2, [r7, #7]
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001452:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	b211      	sxth	r1, r2
 800145a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800145e:	400a      	ands	r2, r1
 8001460:	b211      	sxth	r1, r2
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <SetEPDoubleBuff+0x44>)
 8001464:	430a      	orrs	r2, r1
 8001466:	b212      	sxth	r2, r2
 8001468:	b292      	uxth	r2, r2
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	ffff8180 	.word	0xffff8180

0800147c <ClearEPDoubleBuff>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEPDoubleBuff(uint8_t bEpNum)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  _ClearEP_KIND(bEpNum);
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800148e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001492:	79fa      	ldrb	r2, [r7, #7]
 8001494:	0092      	lsls	r2, r2, #2
 8001496:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800149a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	b211      	sxth	r1, r2
 80014a2:	f640 620f 	movw	r2, #3599	; 0xe0f
 80014a6:	400a      	ands	r2, r1
 80014a8:	b211      	sxth	r1, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <ClearEPDoubleBuff+0x44>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	b212      	sxth	r2, r2
 80014b0:	b292      	uxth	r2, r2
 80014b2:	601a      	str	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	ffff8080 	.word	0xffff8080

080014c4 <GetTxStallStatus>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Tx Stall status.
*******************************************************************************/
uint16_t GetTxStallStatus(uint8_t bEpNum)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  return(_GetTxStallStatus(bEpNum));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014d6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80014e0:	2b10      	cmp	r3, #16
 80014e2:	bf0c      	ite	eq
 80014e4:	2301      	moveq	r3, #1
 80014e6:	2300      	movne	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	b29b      	uxth	r3, r3
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <GetRxStallStatus>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx Stall status.
*******************************************************************************/
uint16_t GetRxStallStatus(uint8_t bEpNum)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  return(_GetRxStallStatus(bEpNum));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800150a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001518:	bf0c      	ite	eq
 800151a:	2301      	moveq	r3, #1
 800151c:	2300      	movne	r3, #0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	b29b      	uxth	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <ClearEP_CTR_RX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_CTR_RX(uint8_t bEpNum)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  _ClearEP_CTR_RX(bEpNum);
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800153e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001542:	79fa      	ldrb	r2, [r7, #7]
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800154a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800154e:	6811      	ldr	r1, [r2, #0]
 8001550:	f640 728f 	movw	r2, #3983	; 0xf8f
 8001554:	400a      	ands	r2, r1
 8001556:	601a      	str	r2, [r3, #0]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop

08001564 <ClearEP_CTR_TX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_CTR_TX(uint8_t bEpNum)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  _ClearEP_CTR_TX(bEpNum);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001576:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001582:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001586:	6811      	ldr	r1, [r2, #0]
 8001588:	f648 720f 	movw	r2, #36623	; 0x8f0f
 800158c:	400a      	ands	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop

0800159c <ToggleDTOG_RX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ToggleDTOG_RX(uint8_t bEpNum)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  _ToggleDTOG_RX(bEpNum);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015ae:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80015ba:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	4611      	mov	r1, r2
 80015c2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80015c6:	400a      	ands	r2, r1
 80015c8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80015cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <ToggleDTOG_TX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ToggleDTOG_TX(uint8_t bEpNum)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  _ToggleDTOG_TX(bEpNum);
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015ee:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80015f2:	79fa      	ldrb	r2, [r7, #7]
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80015fa:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	4611      	mov	r1, r2
 8001602:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001606:	400a      	ands	r2, r1
 8001608:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800160c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001610:	601a      	str	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <ClearDTOG_RX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  _ClearDTOG_RX(bEpNum);
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800162e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d015      	beq.n	8001668 <ClearDTOG_RX+0x4c>
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001644:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001648:	79fa      	ldrb	r2, [r7, #7]
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001650:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	4611      	mov	r1, r2
 8001658:	f640 720f 	movw	r2, #3855	; 0xf0f
 800165c:	400a      	ands	r2, r1
 800165e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001666:	601a      	str	r2, [r3, #0]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop

08001674 <ClearDTOG_TX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  _ClearDTOG_TX(bEpNum);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001686:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001690:	2b00      	cmp	r3, #0
 8001692:	d015      	beq.n	80016c0 <ClearDTOG_TX+0x4c>
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800169c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80016a8:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	4611      	mov	r1, r2
 80016b0:	f640 720f 	movw	r2, #3855	; 0xf0f
 80016b4:	400a      	ands	r2, r1
 80016b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ba:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop

080016cc <SetEPAddress>:
*                  bAddr: New endpoint address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPAddress(uint8_t bEpNum, uint8_t bAddr)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	460a      	mov	r2, r1
 80016d6:	71fb      	strb	r3, [r7, #7]
 80016d8:	4613      	mov	r3, r2
 80016da:	71bb      	strb	r3, [r7, #6]
  _SetEPAddress(bEpNum, bAddr);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016e4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80016e8:	79fa      	ldrb	r2, [r7, #7]
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80016f0:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	4611      	mov	r1, r2
 80016f8:	f640 720f 	movw	r2, #3855	; 0xf0f
 80016fc:	400a      	ands	r2, r1
 80016fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001702:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001706:	79b9      	ldrb	r1, [r7, #6]
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop

08001718 <GetEPAddress>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Endpoint address.
*******************************************************************************/
uint8_t GetEPAddress(uint8_t bEpNum)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  return(_GetEPAddress(bEpNum));
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800172a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop

08001744 <SetEPTxAddr>:
*                  wAddr: new address. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	80bb      	strh	r3, [r7, #4]
  _SetEPTxAddr(bEpNum, wAddr);
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <SetEPTxAddr+0x3c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b29a      	uxth	r2, r3
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001764:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	461a      	mov	r2, r3
 800176c:	88bb      	ldrh	r3, [r7, #4]
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	b29b      	uxth	r3, r3
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	6013      	str	r3, [r2, #0]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40005c50 	.word	0x40005c50

08001784 <SetEPRxAddr>:
*                  wAddr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	460a      	mov	r2, r1
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	4613      	mov	r3, r2
 8001792:	80bb      	strh	r3, [r7, #4]
  _SetEPRxAddr(bEpNum, wAddr);
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <SetEPRxAddr+0x38>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b29a      	uxth	r2, r3
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	441a      	add	r2, r3
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <SetEPRxAddr+0x3c>)
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	461a      	mov	r2, r3
 80017a8:	88bb      	ldrh	r3, [r7, #4]
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	6013      	str	r3, [r2, #0]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40005c50 	.word	0x40005c50
 80017c0:	20003004 	.word	0x20003004

080017c4 <GetEPTxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  return(_GetEPTxAddr(bEpNum));
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <GetEPTxAddr+0x30>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4413      	add	r3, r2
 80017da:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80017de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40005c50 	.word	0x40005c50

080017f8 <GetEPRxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  return(_GetEPRxAddr(bEpNum));
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <GetEPRxAddr+0x2c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29a      	uxth	r2, r3
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	441a      	add	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <GetEPRxAddr+0x30>)
 8001810:	4413      	add	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40005c50 	.word	0x40005c50
 8001828:	20003004 	.word	0x20003004

0800182c <SetEPTxCount>:
*                  wCount: new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	460a      	mov	r2, r1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	80bb      	strh	r3, [r7, #4]
  _SetEPTxCount(bEpNum, wCount);
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <SetEPTxCount+0x34>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29a      	uxth	r2, r3
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	441a      	add	r2, r3
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <SetEPTxCount+0x38>)
 800184a:	4413      	add	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	461a      	mov	r2, r3
 8001850:	88bb      	ldrh	r3, [r7, #4]
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40005c50 	.word	0x40005c50
 8001864:	20003002 	.word	0x20003002

08001868 <SetEPCountRxReg>:
*                  wCount: the new register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPCountRxReg(uint32_t *pdwReg, uint16_t wCount)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
  _SetEPCountRxReg(dwReg, wCount);
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	2b3e      	cmp	r3, #62	; 0x3e
 8001878:	d912      	bls.n	80018a0 <SetEPCountRxReg+0x38>
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	095b      	lsrs	r3, r3, #5
 800187e:	81fb      	strh	r3, [r7, #14]
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <SetEPCountRxReg+0x28>
 800188a:	89fb      	ldrh	r3, [r7, #14]
 800188c:	3b01      	subs	r3, #1
 800188e:	81fb      	strh	r3, [r7, #14]
 8001890:	89fb      	ldrh	r3, [r7, #14]
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001898:	461a      	mov	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	e00f      	b.n	80018c0 <SetEPCountRxReg+0x58>
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPCountRxReg(uint32_t *pdwReg, uint16_t wCount)
{
  _SetEPCountRxReg(dwReg, wCount);
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	085b      	lsrs	r3, r3, #1
 80018a4:	81fb      	strh	r3, [r7, #14]
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <SetEPCountRxReg+0x4e>
 80018b0:	89fb      	ldrh	r3, [r7, #14]
 80018b2:	3301      	adds	r3, #1
 80018b4:	81fb      	strh	r3, [r7, #14]
 80018b6:	89fb      	ldrh	r3, [r7, #14]
 80018b8:	029b      	lsls	r3, r3, #10
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	601a      	str	r2, [r3, #0]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop

080018cc <SetEPRxCount>:
*                  wCount: the new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	460a      	mov	r2, r1
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	4613      	mov	r3, r2
 80018da:	80bb      	strh	r3, [r7, #4]
  _SetEPRxCount(bEpNum, wCount);
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <SetEPRxCount+0x7c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	441a      	add	r2, r3
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <SetEPRxCount+0x80>)
 80018ea:	4413      	add	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	88bb      	ldrh	r3, [r7, #4]
 80018f2:	2b3e      	cmp	r3, #62	; 0x3e
 80018f4:	d912      	bls.n	800191c <SetEPRxCount+0x50>
 80018f6:	88bb      	ldrh	r3, [r7, #4]
 80018f8:	095b      	lsrs	r3, r3, #5
 80018fa:	81fb      	strh	r3, [r7, #14]
 80018fc:	88bb      	ldrh	r3, [r7, #4]
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <SetEPRxCount+0x40>
 8001906:	89fb      	ldrh	r3, [r7, #14]
 8001908:	3b01      	subs	r3, #1
 800190a:	81fb      	strh	r3, [r7, #14]
 800190c:	89fb      	ldrh	r3, [r7, #14]
 800190e:	029b      	lsls	r3, r3, #10
 8001910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001914:	461a      	mov	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	e00f      	b.n	800193c <SetEPRxCount+0x70>
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800191c:	88bb      	ldrh	r3, [r7, #4]
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	81fb      	strh	r3, [r7, #14]
 8001922:	88bb      	ldrh	r3, [r7, #4]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <SetEPRxCount+0x66>
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	3301      	adds	r3, #1
 8001930:	81fb      	strh	r3, [r7, #14]
 8001932:	89fb      	ldrh	r3, [r7, #14]
 8001934:	029b      	lsls	r3, r3, #10
 8001936:	461a      	mov	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	601a      	str	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40005c50 	.word	0x40005c50
 800194c:	20003006 	.word	0x20003006

08001950 <GetEPTxCount>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None
* Return         : Tx count value.
*******************************************************************************/
uint16_t GetEPTxCount(uint8_t bEpNum)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  return(_GetEPTxCount(bEpNum));
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <GetEPTxCount+0x30>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b29a      	uxth	r2, r3
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	441a      	add	r2, r3
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <GetEPTxCount+0x34>)
 8001968:	4413      	add	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001974:	b29b      	uxth	r3, r3
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40005c50 	.word	0x40005c50
 8001984:	20003002 	.word	0x20003002

08001988 <GetEPRxCount>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  return(_GetEPRxCount(bEpNum));
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <GetEPRxCount+0x30>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b29a      	uxth	r2, r3
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	441a      	add	r2, r3
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <GetEPRxCount+0x34>)
 80019a0:	4413      	add	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ac:	b29b      	uxth	r3, r3
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	40005c50 	.word	0x40005c50
 80019bc:	20003006 	.word	0x20003006

080019c0 <SetEPDblBuffAddr>:
*                  wBuf1Addr: new address of buffer 1.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	460b      	mov	r3, r1
 80019cc:	80bb      	strh	r3, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	807b      	strh	r3, [r7, #2]
  _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <SetEPDblBuffAddr+0x5c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4413      	add	r3, r2
 80019de:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80019e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	461a      	mov	r2, r3
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <SetEPDblBuffAddr+0x5c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	441a      	add	r2, r3
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <SetEPDblBuffAddr+0x60>)
 8001a02:	4413      	add	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	461a      	mov	r2, r3
 8001a08:	887b      	ldrh	r3, [r7, #2]
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	6013      	str	r3, [r2, #0]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40005c50 	.word	0x40005c50
 8001a20:	20003004 	.word	0x20003004

08001a24 <SetEPDblBuf0Addr>:
*                  wBuf0Addr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf0Addr(uint8_t bEpNum, uint16_t wBuf0Addr)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	71fb      	strb	r3, [r7, #7]
 8001a30:	4613      	mov	r3, r2
 8001a32:	80bb      	strh	r3, [r7, #4]
  _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <SetEPDblBuf0Addr+0x3c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001a44:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	88bb      	ldrh	r3, [r7, #4]
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	6013      	str	r3, [r2, #0]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	40005c50 	.word	0x40005c50

08001a64 <SetEPDblBuf1Addr>:
*                  wBuf1Addr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf1Addr(uint8_t bEpNum, uint16_t wBuf1Addr)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	4613      	mov	r3, r2
 8001a72:	80bb      	strh	r3, [r7, #4]
  _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <SetEPDblBuf1Addr+0x38>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	441a      	add	r2, r3
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <SetEPDblBuf1Addr+0x3c>)
 8001a82:	4413      	add	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	461a      	mov	r2, r3
 8001a88:	88bb      	ldrh	r3, [r7, #4]
 8001a8a:	085b      	lsrs	r3, r3, #1
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	6013      	str	r3, [r2, #0]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40005c50 	.word	0x40005c50
 8001aa0:	20003004 	.word	0x20003004

08001aa4 <GetEPDblBuf0Addr>:
* Input          : bEpNum: Endpoint Number.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint16_t GetEPDblBuf0Addr(uint8_t bEpNum)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  return(_GetEPDblBuf0Addr(bEpNum));
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <GetEPDblBuf0Addr+0x30>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001abe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	b29b      	uxth	r3, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40005c50 	.word	0x40005c50

08001ad8 <GetEPDblBuf1Addr>:
* Input          : bEpNum: Endpoint Number.
* Output         : None.
* Return         : Address of the Buffer 1.
*******************************************************************************/
uint16_t GetEPDblBuf1Addr(uint8_t bEpNum)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  return(_GetEPDblBuf1Addr(bEpNum));
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <GetEPDblBuf1Addr+0x2c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	441a      	add	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <GetEPDblBuf1Addr+0x30>)
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40005c50 	.word	0x40005c50
 8001b08:	20003004 	.word	0x20003004

08001b0c <SetEPDblBuffCount>:
* Input          : bEpNum,bDir, wCount
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
 8001b16:	460b      	mov	r3, r1
 8001b18:	71bb      	strb	r3, [r7, #6]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80bb      	strh	r3, [r7, #4]
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d130      	bne.n	8001b86 <SetEPDblBuffCount+0x7a>
 8001b24:	4b43      	ldr	r3, [pc, #268]	; (8001c34 <SetEPDblBuffCount+0x128>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	441a      	add	r2, r3
 8001b30:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <SetEPDblBuffCount+0x12c>)
 8001b32:	4413      	add	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	88bb      	ldrh	r3, [r7, #4]
 8001b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8001b3c:	d912      	bls.n	8001b64 <SetEPDblBuffCount+0x58>
 8001b3e:	88bb      	ldrh	r3, [r7, #4]
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	82fb      	strh	r3, [r7, #22]
 8001b44:	88bb      	ldrh	r3, [r7, #4]
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <SetEPDblBuffCount+0x48>
 8001b4e:	8afb      	ldrh	r3, [r7, #22]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	82fb      	strh	r3, [r7, #22]
 8001b54:	8afb      	ldrh	r3, [r7, #22]
 8001b56:	029b      	lsls	r3, r3, #10
 8001b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e01f      	b.n	8001ba4 <SetEPDblBuffCount+0x98>
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	82fb      	strh	r3, [r7, #22]
 8001b6a:	88bb      	ldrh	r3, [r7, #4]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <SetEPDblBuffCount+0x6e>
 8001b74:	8afb      	ldrh	r3, [r7, #22]
 8001b76:	3301      	adds	r3, #1
 8001b78:	82fb      	strh	r3, [r7, #22]
 8001b7a:	8afb      	ldrh	r3, [r7, #22]
 8001b7c:	029b      	lsls	r3, r3, #10
 8001b7e:	461a      	mov	r2, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e00e      	b.n	8001ba4 <SetEPDblBuffCount+0x98>
 8001b86:	79bb      	ldrb	r3, [r7, #6]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d10b      	bne.n	8001ba4 <SetEPDblBuffCount+0x98>
 8001b8c:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <SetEPDblBuffCount+0x128>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	441a      	add	r2, r3
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <SetEPDblBuffCount+0x12c>)
 8001b9a:	4413      	add	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	88bb      	ldrh	r3, [r7, #4]
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	79bb      	ldrb	r3, [r7, #6]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d130      	bne.n	8001c0c <SetEPDblBuffCount+0x100>
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <SetEPDblBuffCount+0x128>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	441a      	add	r2, r3
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <SetEPDblBuffCount+0x130>)
 8001bb8:	4413      	add	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	88bb      	ldrh	r3, [r7, #4]
 8001bc0:	2b3e      	cmp	r3, #62	; 0x3e
 8001bc2:	d912      	bls.n	8001bea <SetEPDblBuffCount+0xde>
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	82bb      	strh	r3, [r7, #20]
 8001bca:	88bb      	ldrh	r3, [r7, #4]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <SetEPDblBuffCount+0xce>
 8001bd4:	8abb      	ldrh	r3, [r7, #20]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	82bb      	strh	r3, [r7, #20]
 8001bda:	8abb      	ldrh	r3, [r7, #20]
 8001bdc:	029b      	lsls	r3, r3, #10
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	e01f      	b.n	8001c2a <SetEPDblBuffCount+0x11e>
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	82bb      	strh	r3, [r7, #20]
 8001bf0:	88bb      	ldrh	r3, [r7, #4]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <SetEPDblBuffCount+0xf4>
 8001bfa:	8abb      	ldrh	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	82bb      	strh	r3, [r7, #20]
 8001c00:	8abb      	ldrh	r3, [r7, #20]
 8001c02:	029b      	lsls	r3, r3, #10
 8001c04:	461a      	mov	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	601a      	str	r2, [r3, #0]
}
 8001c0a:	e00e      	b.n	8001c2a <SetEPDblBuffCount+0x11e>
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d10b      	bne.n	8001c2a <SetEPDblBuffCount+0x11e>
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <SetEPDblBuffCount+0x128>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	441a      	add	r2, r3
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <SetEPDblBuffCount+0x130>)
 8001c20:	4413      	add	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	461a      	mov	r2, r3
 8001c26:	88bb      	ldrh	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40005c50 	.word	0x40005c50
 8001c38:	20003002 	.word	0x20003002
 8001c3c:	20003006 	.word	0x20003006

08001c40 <SetEPDblBuf0Count>:
* Input          : bEpNum, bDir,  wCount
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf0Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	71bb      	strb	r3, [r7, #6]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80bb      	strh	r3, [r7, #4]
  _SetEPDblBuf0Count(bEpNum, bDir, wCount);
 8001c52:	79bb      	ldrb	r3, [r7, #6]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d130      	bne.n	8001cba <SetEPDblBuf0Count+0x7a>
 8001c58:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <SetEPDblBuf0Count+0xa4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	441a      	add	r2, r3
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <SetEPDblBuf0Count+0xa8>)
 8001c66:	4413      	add	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	88bb      	ldrh	r3, [r7, #4]
 8001c6e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c70:	d912      	bls.n	8001c98 <SetEPDblBuf0Count+0x58>
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	095b      	lsrs	r3, r3, #5
 8001c76:	81fb      	strh	r3, [r7, #14]
 8001c78:	88bb      	ldrh	r3, [r7, #4]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d102      	bne.n	8001c88 <SetEPDblBuf0Count+0x48>
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	81fb      	strh	r3, [r7, #14]
 8001c88:	89fb      	ldrh	r3, [r7, #14]
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c90:	461a      	mov	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	601a      	str	r2, [r3, #0]
}
 8001c96:	e01f      	b.n	8001cd8 <SetEPDblBuf0Count+0x98>
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf0Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuf0Count(bEpNum, bDir, wCount);
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	085b      	lsrs	r3, r3, #1
 8001c9c:	81fb      	strh	r3, [r7, #14]
 8001c9e:	88bb      	ldrh	r3, [r7, #4]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <SetEPDblBuf0Count+0x6e>
 8001ca8:	89fb      	ldrh	r3, [r7, #14]
 8001caa:	3301      	adds	r3, #1
 8001cac:	81fb      	strh	r3, [r7, #14]
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	e00e      	b.n	8001cd8 <SetEPDblBuf0Count+0x98>
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf0Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuf0Count(bEpNum, bDir, wCount);
 8001cba:	79bb      	ldrb	r3, [r7, #6]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d10b      	bne.n	8001cd8 <SetEPDblBuf0Count+0x98>
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <SetEPDblBuf0Count+0xa4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	441a      	add	r2, r3
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <SetEPDblBuf0Count+0xa8>)
 8001cce:	4413      	add	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40005c50 	.word	0x40005c50
 8001ce8:	20003002 	.word	0x20003002

08001cec <SetEPDblBuf1Count>:
* Input          : bEpNum,  bDir,  wCount
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf1Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	71bb      	strb	r3, [r7, #6]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	80bb      	strh	r3, [r7, #4]
  _SetEPDblBuf1Count(bEpNum, bDir, wCount);
 8001cfe:	79bb      	ldrb	r3, [r7, #6]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d130      	bne.n	8001d66 <SetEPDblBuf1Count+0x7a>
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <SetEPDblBuf1Count+0xa4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	441a      	add	r2, r3
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <SetEPDblBuf1Count+0xa8>)
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	88bb      	ldrh	r3, [r7, #4]
 8001d1a:	2b3e      	cmp	r3, #62	; 0x3e
 8001d1c:	d912      	bls.n	8001d44 <SetEPDblBuf1Count+0x58>
 8001d1e:	88bb      	ldrh	r3, [r7, #4]
 8001d20:	095b      	lsrs	r3, r3, #5
 8001d22:	81fb      	strh	r3, [r7, #14]
 8001d24:	88bb      	ldrh	r3, [r7, #4]
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <SetEPDblBuf1Count+0x48>
 8001d2e:	89fb      	ldrh	r3, [r7, #14]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	81fb      	strh	r3, [r7, #14]
 8001d34:	89fb      	ldrh	r3, [r7, #14]
 8001d36:	029b      	lsls	r3, r3, #10
 8001d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	e01f      	b.n	8001d84 <SetEPDblBuf1Count+0x98>
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf1Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuf1Count(bEpNum, bDir, wCount);
 8001d44:	88bb      	ldrh	r3, [r7, #4]
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	81fb      	strh	r3, [r7, #14]
 8001d4a:	88bb      	ldrh	r3, [r7, #4]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <SetEPDblBuf1Count+0x6e>
 8001d54:	89fb      	ldrh	r3, [r7, #14]
 8001d56:	3301      	adds	r3, #1
 8001d58:	81fb      	strh	r3, [r7, #14]
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	029b      	lsls	r3, r3, #10
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	e00e      	b.n	8001d84 <SetEPDblBuf1Count+0x98>
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf1Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuf1Count(bEpNum, bDir, wCount);
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d10b      	bne.n	8001d84 <SetEPDblBuf1Count+0x98>
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <SetEPDblBuf1Count+0xa4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	441a      	add	r2, r3
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <SetEPDblBuf1Count+0xa8>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	461a      	mov	r2, r3
 8001d80:	88bb      	ldrh	r3, [r7, #4]
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40005c50 	.word	0x40005c50
 8001d94:	20003006 	.word	0x20003006

08001d98 <GetEPDblBuf0Count>:
* Input          : bEpNum: Endpoint Number.
* Output         : None.
* Return         : Endpoint Buffer 0 count
*******************************************************************************/
uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  return(_GetEPDblBuf0Count(bEpNum));
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <GetEPDblBuf0Count+0x30>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	441a      	add	r2, r3
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <GetEPDblBuf0Count+0x34>)
 8001db0:	4413      	add	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dbc:	b29b      	uxth	r3, r3
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	40005c50 	.word	0x40005c50
 8001dcc:	20003002 	.word	0x20003002

08001dd0 <GetEPDblBuf1Count>:
* Input          : bEpNum: Endpoint Number.
* Output         : None.
* Return         : Endpoint Buffer 1 count.
*******************************************************************************/
uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  return(_GetEPDblBuf1Count(bEpNum));
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <GetEPDblBuf1Count+0x30>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	441a      	add	r2, r3
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <GetEPDblBuf1Count+0x34>)
 8001de8:	4413      	add	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df4:	b29b      	uxth	r3, r3
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	40005c50 	.word	0x40005c50
 8001e04:	20003006 	.word	0x20003006

08001e08 <GetEPDblBufDir>:
* Output         : None.
* Return         : EP_DBUF_OUT, EP_DBUF_IN,
*                  EP_DBUF_ERR if the endpoint counter not yet programmed.
*******************************************************************************/
EP_DBUF_DIR GetEPDblBufDir(uint8_t bEpNum)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  if ((uint16_t)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <GetEPDblBufDir+0x58>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	441a      	add	r2, r3
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <GetEPDblBufDir+0x5c>)
 8001e20:	4413      	add	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <GetEPDblBufDir+0x2a>
    return(EP_DBUF_OUT);
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e010      	b.n	8001e54 <GetEPDblBufDir+0x4c>
  else if (((uint16_t)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <GetEPDblBufDir+0x58>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	441a      	add	r2, r3
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <GetEPDblBufDir+0x60>)
 8001e40:	4413      	add	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <GetEPDblBufDir+0x4a>
    return(EP_DBUF_IN);
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e000      	b.n	8001e54 <GetEPDblBufDir+0x4c>
  else
    return(EP_DBUF_ERR);
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40005c50 	.word	0x40005c50
 8001e64:	20003006 	.word	0x20003006
 8001e68:	20003002 	.word	0x20003002

08001e6c <FreeUserBuffer>:
* Input          : bEpNum, bDir
* Output         : None.
* Return         : None.
*******************************************************************************/
void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	460a      	mov	r2, r1
 8001e76:	71fb      	strb	r3, [r7, #7]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	71bb      	strb	r3, [r7, #6]
  if (bDir == EP_DBUF_OUT)
 8001e7c:	79bb      	ldrb	r3, [r7, #6]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d116      	bne.n	8001eb0 <FreeUserBuffer+0x44>
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e8a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001e8e:	79fa      	ldrb	r2, [r7, #7]
 8001e90:	0092      	lsls	r2, r2, #2
 8001e92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001e96:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ea8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001eac:	601a      	str	r2, [r3, #0]
  }
  else if (bDir == EP_DBUF_IN)
  { /* IN double buffered endpoint */
    _ToggleDTOG_RX(bEpNum);
  }
}
 8001eae:	e018      	b.n	8001ee2 <FreeUserBuffer+0x76>
{
  if (bDir == EP_DBUF_OUT)
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
  }
  else if (bDir == EP_DBUF_IN)
 8001eb0:	79bb      	ldrb	r3, [r7, #6]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d115      	bne.n	8001ee2 <FreeUserBuffer+0x76>
  { /* IN double buffered endpoint */
    _ToggleDTOG_RX(bEpNum);
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ebe:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001ec2:	79fa      	ldrb	r2, [r7, #7]
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001eca:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001edc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ee0:	601a      	str	r2, [r3, #0]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <ToWord>:
* Input          : bh: byte high, bl: bytes low.
* Output         : None.
* Return         : resulted word.
*******************************************************************************/
uint16_t ToWord(uint8_t bh, uint8_t bl)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71bb      	strb	r3, [r7, #6]
  uint16_t wRet;
  wRet = (uint16_t)bl | ((uint16_t)bh << 8);
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	81fb      	strh	r3, [r7, #14]
  return(wRet);
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <ByteSwap>:
* Input          : wSwW: word to Swap.
* Output         : None.
* Return         : resulted word.
*******************************************************************************/
uint16_t ByteSwap(uint16_t wSwW)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	73fb      	strb	r3, [r7, #15]
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	b21a      	sxth	r2, r3
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	4313      	orrs	r3, r2
 8001f36:	b21b      	sxth	r3, r3
 8001f38:	81bb      	strh	r3, [r7, #12]
  return(wRet);
 8001f3a:	89bb      	ldrh	r3, [r7, #12]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001f58:	883b      	ldrh	r3, [r7, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	105b      	asrs	r3, r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001f66:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
  for (i = n; i != 0; i--)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	e01b      	b.n	8001fac <UserToPMABufferCopy+0x64>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	613b      	str	r3, [r7, #16]
    pbUsrBuf++;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	461a      	mov	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
    *pdwVal++ = temp2;
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	1c9a      	adds	r2, r3, #2
 8001f92:	61ba      	str	r2, [r7, #24]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	b292      	uxth	r2, r2
 8001f98:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	607b      	str	r3, [r7, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1e0      	bne.n	8001f74 <UserToPMABufferCopy+0x2c>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8001fcc:	883b      	ldrh	r3, [r7, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	105b      	asrs	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001fda:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	613b      	str	r3, [r7, #16]
  for (i = n; i != 0; i--)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e00e      	b.n	8002006 <PMAToUserBufferCopy+0x4a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	1d11      	adds	r1, r2, #4
 8001ff2:	6139      	str	r1, [r7, #16]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	607b      	str	r3, [r7, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3b01      	subs	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ed      	bne.n	8001fe8 <PMAToUserBufferCopy+0x2c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800200c:	bf00      	nop
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop

08002018 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
  __IO uint16_t wEPVal = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	80fb      	strh	r3, [r7, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002022:	e15a      	b.n	80022da <CTR_LP+0x2c2>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8002024:	4b83      	ldr	r3, [pc, #524]	; (8002234 <CTR_LP+0x21c>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b81      	ldr	r3, [pc, #516]	; (8002238 <CTR_LP+0x220>)
 8002034:	701a      	strb	r2, [r3, #0]
    if (EPindex == 0)
 8002036:	4b80      	ldr	r3, [pc, #512]	; (8002238 <CTR_LP+0x220>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f040 8104 	bne.w	8002248 <CTR_LP+0x230>

      /* save RX & TX status */
      /* and set both to NAK */


	    SaveRState = _GetENDPOINT(ENDP0);
 8002040:	4b7e      	ldr	r3, [pc, #504]	; (800223c <CTR_LP+0x224>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b7e      	ldr	r3, [pc, #504]	; (8002240 <CTR_LP+0x228>)
 8002048:	801a      	strh	r2, [r3, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800204a:	4b7d      	ldr	r3, [pc, #500]	; (8002240 <CTR_LP+0x228>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b7b      	ldr	r3, [pc, #492]	; (8002244 <CTR_LP+0x22c>)
 8002058:	801a      	strh	r2, [r3, #0]
	    SaveRState &=  EPRX_STAT;	
 800205a:	4b79      	ldr	r3, [pc, #484]	; (8002240 <CTR_LP+0x228>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002064:	b29a      	uxth	r2, r3
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <CTR_LP+0x228>)
 8002068:	801a      	strh	r2, [r3, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800206a:	4b74      	ldr	r3, [pc, #464]	; (800223c <CTR_LP+0x224>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8002072:	401c      	ands	r4, r3
 8002074:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 8002078:	f084 0420 	eor.w	r4, r4, #32
 800207c:	4a6f      	ldr	r2, [pc, #444]	; (800223c <CTR_LP+0x224>)
 800207e:	4623      	mov	r3, r4
 8002080:	b29b      	uxth	r3, r3
 8002082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208a:	6013      	str	r3, [r2, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 800208c:	4b69      	ldr	r3, [pc, #420]	; (8002234 <CTR_LP+0x21c>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d13e      	bne.n	8002118 <CTR_LP+0x100>

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */


        _ClearEP_CTR_TX(ENDP0);
 800209a:	4968      	ldr	r1, [pc, #416]	; (800223c <CTR_LP+0x224>)
 800209c:	4b67      	ldr	r3, [pc, #412]	; (800223c <CTR_LP+0x224>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80020a4:	4013      	ands	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]
        In0_Process();
 80020a8:	f001 f87e 	bl	80031a8 <In0_Process>

           /* before terminate set Tx & Rx status */

            _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80020ac:	4b63      	ldr	r3, [pc, #396]	; (800223c <CTR_LP+0x224>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 80020b4:	401c      	ands	r4, r3
 80020b6:	4b62      	ldr	r3, [pc, #392]	; (8002240 <CTR_LP+0x228>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <CTR_LP+0xb2>
 80020c6:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 80020ca:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <CTR_LP+0x228>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <CTR_LP+0xc6>
 80020da:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 80020de:	4b59      	ldr	r3, [pc, #356]	; (8002244 <CTR_LP+0x22c>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <CTR_LP+0xda>
 80020ee:	f084 0410 	eor.w	r4, r4, #16
 80020f2:	4b54      	ldr	r3, [pc, #336]	; (8002244 <CTR_LP+0x22c>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <CTR_LP+0xee>
 8002102:	f084 0420 	eor.w	r4, r4, #32
 8002106:	4a4d      	ldr	r2, [pc, #308]	; (800223c <CTR_LP+0x224>)
 8002108:	4623      	mov	r3, r4
 800210a:	b29b      	uxth	r3, r3
 800210c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	6013      	str	r3, [r2, #0]
		  return;
 8002116:	e0ea      	b.n	80022ee <CTR_LP+0x2d6>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8002118:	4b48      	ldr	r3, [pc, #288]	; (800223c <CTR_LP+0x224>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	80fb      	strh	r3, [r7, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	b29b      	uxth	r3, r3
 8002124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002128:	2b00      	cmp	r3, #0
 800212a:	d03e      	beq.n	80021aa <CTR_LP+0x192>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800212c:	4943      	ldr	r1, [pc, #268]	; (800223c <CTR_LP+0x224>)
 800212e:	4b43      	ldr	r3, [pc, #268]	; (800223c <CTR_LP+0x224>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002136:	4013      	ands	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
          Setup0_Process();
 800213a:	f000 ffc9 	bl	80030d0 <Setup0_Process>
          /* before terminate set Tx & Rx status */

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800213e:	4b3f      	ldr	r3, [pc, #252]	; (800223c <CTR_LP+0x224>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8002146:	401c      	ands	r4, r3
 8002148:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <CTR_LP+0x228>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <CTR_LP+0x144>
 8002158:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800215c:	4b38      	ldr	r3, [pc, #224]	; (8002240 <CTR_LP+0x228>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <CTR_LP+0x158>
 800216c:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 8002170:	4b34      	ldr	r3, [pc, #208]	; (8002244 <CTR_LP+0x22c>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <CTR_LP+0x16c>
 8002180:	f084 0410 	eor.w	r4, r4, #16
 8002184:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <CTR_LP+0x22c>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <CTR_LP+0x180>
 8002194:	f084 0420 	eor.w	r4, r4, #32
 8002198:	4a28      	ldr	r2, [pc, #160]	; (800223c <CTR_LP+0x224>)
 800219a:	4623      	mov	r3, r4
 800219c:	b29b      	uxth	r3, r3
 800219e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a6:	6013      	str	r3, [r2, #0]
          return;
 80021a8:	e0a1      	b.n	80022ee <CTR_LP+0x2d6>
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f280 8092 	bge.w	80022da <CTR_LP+0x2c2>
        {
          _ClearEP_CTR_RX(ENDP0);
 80021b6:	4921      	ldr	r1, [pc, #132]	; (800223c <CTR_LP+0x224>)
 80021b8:	4b20      	ldr	r3, [pc, #128]	; (800223c <CTR_LP+0x224>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021c0:	4013      	ands	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
          Out0_Process();
 80021c4:	f001 f838 	bl	8003238 <Out0_Process>
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <CTR_LP+0x224>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 80021d0:	401c      	ands	r4, r3
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <CTR_LP+0x228>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <CTR_LP+0x1ce>
 80021e2:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <CTR_LP+0x228>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <CTR_LP+0x1e2>
 80021f6:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <CTR_LP+0x22c>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <CTR_LP+0x1f6>
 800220a:	f084 0410 	eor.w	r4, r4, #16
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <CTR_LP+0x22c>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <CTR_LP+0x20a>
 800221e:	f084 0420 	eor.w	r4, r4, #32
 8002222:	4a06      	ldr	r2, [pc, #24]	; (800223c <CTR_LP+0x224>)
 8002224:	4623      	mov	r3, r4
 8002226:	b29b      	uxth	r3, r3
 8002228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002230:	6013      	str	r3, [r2, #0]
          return;
 8002232:	e05c      	b.n	80022ee <CTR_LP+0x2d6>
 8002234:	20000146 	.word	0x20000146
 8002238:	200009a8 	.word	0x200009a8
 800223c:	40005c00 	.word	0x40005c00
 8002240:	2000099c 	.word	0x2000099c
 8002244:	2000099e 	.word	0x2000099e
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <CTR_LP+0x2dc>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002252:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	80fb      	strh	r3, [r7, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	b29b      	uxth	r3, r3
 8002260:	b21b      	sxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	da19      	bge.n	800229a <CTR_LP+0x282>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8002266:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <CTR_LP+0x2dc>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002270:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002274:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <CTR_LP+0x2dc>)
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800227e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002282:	6811      	ldr	r1, [r2, #0]
 8002284:	f640 728f 	movw	r2, #3983	; 0xf8f
 8002288:	400a      	ands	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <CTR_LP+0x2dc>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3b01      	subs	r3, #1
 8002292:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <CTR_LP+0x2e0>)
 8002294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002298:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	b29b      	uxth	r3, r3
 800229e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d019      	beq.n	80022da <CTR_LP+0x2c2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <CTR_LP+0x2dc>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022b0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80022b4:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <CTR_LP+0x2dc>)
 80022b6:	7812      	ldrb	r2, [r2, #0]
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80022be:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80022c2:	6811      	ldr	r1, [r2, #0]
 80022c4:	f648 720f 	movw	r2, #36623	; 0x8f0f
 80022c8:	400a      	ands	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <CTR_LP+0x2dc>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <CTR_LP+0x2e4>)
 80022d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d8:	4798      	blx	r3
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <CTR_LP+0x2e8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <CTR_LP+0x2ec>)
 80022e2:	4611      	mov	r1, r2
 80022e4:	8019      	strh	r1, [r3, #0]
 80022e6:	b213      	sxth	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f6ff ae9b 	blt.w	8002024 <CTR_LP+0xc>
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd90      	pop	{r4, r7, pc}
 80022f4:	200009a8 	.word	0x200009a8
 80022f8:	200000ac 	.word	0x200000ac
 80022fc:	20000090 	.word	0x20000090
 8002300:	40005c44 	.word	0x40005c44
 8002304:	20000146 	.word	0x20000146

08002308 <CTR_HP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_HP(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  uint32_t wEPVal = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8002312:	e055      	b.n	80023c0 <CTR_HP+0xb8>
  {
    _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
 8002314:	4b31      	ldr	r3, [pc, #196]	; (80023dc <CTR_HP+0xd4>)
 8002316:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800231a:	601a      	str	r2, [r3, #0]
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800231c:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <CTR_HP+0xd8>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <CTR_HP+0xdc>)
 800232c:	701a      	strb	r2, [r3, #0]
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <CTR_HP+0xdc>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002338:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	607b      	str	r3, [r7, #4]
    if ((wEPVal & EP_CTR_RX) != 0)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01a      	beq.n	8002382 <CTR_HP+0x7a>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <CTR_HP+0xdc>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002356:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800235a:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <CTR_HP+0xdc>)
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002364:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8002368:	6811      	ldr	r1, [r2, #0]
 800236a:	f640 728f 	movw	r2, #3983	; 0xf8f
 800236e:	400a      	ands	r2, r1
 8002370:	601a      	str	r2, [r3, #0]

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <CTR_HP+0xdc>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	3b01      	subs	r3, #1
 8002378:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <CTR_HP+0xe0>)
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	4798      	blx	r3
 8002380:	e01e      	b.n	80023c0 <CTR_HP+0xb8>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	2b00      	cmp	r3, #0
 800238a:	d019      	beq.n	80023c0 <CTR_HP+0xb8>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <CTR_HP+0xdc>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002396:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800239a:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <CTR_HP+0xdc>)
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	0092      	lsls	r2, r2, #2
 80023a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80023a4:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80023a8:	6811      	ldr	r1, [r2, #0]
 80023aa:	f648 720f 	movw	r2, #36623	; 0x8f0f
 80023ae:	400a      	ands	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <CTR_HP+0xdc>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <CTR_HP+0xe4>)
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	4798      	blx	r3
*******************************************************************************/
void CTR_HP(void)
{
  uint32_t wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <CTR_HP+0xd4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <CTR_HP+0xd8>)
 80023c8:	4611      	mov	r1, r2
 80023ca:	8019      	strh	r1, [r3, #0]
 80023cc:	b213      	sxth	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	dba0      	blt.n	8002314 <CTR_HP+0xc>


    } /* if((wEPVal & EP_CTR_TX) != 0) */

  }/* while(...) */
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40005c44 	.word	0x40005c44
 80023e0:	20000146 	.word	0x20000146
 80023e4:	200009a8 	.word	0x200009a8
 80023e8:	200000ac 	.word	0x200000ac
 80023ec:	20000090 	.word	0x20000090

080023f0 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  pInformation = &Device_Info;
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <USB_Init+0x2c>)
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <USB_Init+0x30>)
 80023f8:	601a      	str	r2, [r3, #0]
  pInformation->ControlState = 2;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <USB_Init+0x2c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2202      	movs	r2, #2
 8002400:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <USB_Init+0x34>)
 8002404:	4a08      	ldr	r2, [pc, #32]	; (8002428 <USB_Init+0x38>)
 8002406:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <USB_Init+0x3c>)
 800240a:	4a09      	ldr	r2, [pc, #36]	; (8002430 <USB_Init+0x40>)
 800240c:	601a      	str	r2, [r3, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <USB_Init+0x34>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4798      	blx	r3
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200009cc 	.word	0x200009cc
 8002420:	200009ac 	.word	0x200009ac
 8002424:	200009a4 	.word	0x200009a4
 8002428:	2000000c 	.word	0x2000000c
 800242c:	200009c8 	.word	0x200009c8
 8002430:	2000003c 	.word	0x2000003c

08002434 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d105      	bne.n	8002450 <Standard_GetConfiguration+0x1c>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <Standard_GetConfiguration+0x34>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2201      	movs	r2, #1
 800244a:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 800244c:	2300      	movs	r3, #0
 800244e:	e006      	b.n	800245e <Standard_GetConfiguration+0x2a>
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <Standard_GetConfiguration+0x38>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <Standard_GetConfiguration+0x34>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	330a      	adds	r3, #10
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200009cc 	.word	0x200009cc
 800246c:	200009c8 	.word	0x200009c8

08002470 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0

  if ((pInformation->USBwValue0 <=
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <Standard_SetConfiguration+0x44>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	78da      	ldrb	r2, [r3, #3]
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <Standard_SetConfiguration+0x48>)
 800247c:	785b      	ldrb	r3, [r3, #1]
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 800247e:	429a      	cmp	r2, r3
 8002480:	d815      	bhi.n	80024ae <Standard_SetConfiguration+0x3e>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <Standard_SetConfiguration+0x44>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	789b      	ldrb	r3, [r3, #2]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d110      	bne.n	80024ae <Standard_SetConfiguration+0x3e>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <Standard_SetConfiguration+0x44>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	889b      	ldrh	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10b      	bne.n	80024ae <Standard_SetConfiguration+0x3e>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <Standard_SetConfiguration+0x44>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <Standard_SetConfiguration+0x44>)
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	78d2      	ldrb	r2, [r2, #3]
 80024a0:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <Standard_SetConfiguration+0x4c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4798      	blx	r3
    return USB_SUCCESS;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <Standard_SetConfiguration+0x40>
  }
  else
  {
    return USB_UNSUPPORT;
 80024ae:	2302      	movs	r3, #2
  }
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200009cc 	.word	0x200009cc
 80024b8:	20000008 	.word	0x20000008
 80024bc:	200009c8 	.word	0x200009c8

080024c0 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <Standard_GetInterface+0x1c>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <Standard_GetInterface+0x34>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	e006      	b.n	80024ea <Standard_GetInterface+0x2a>
  }
  pUser_Standard_Requests->User_GetInterface();
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <Standard_GetInterface+0x38>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <Standard_GetInterface+0x34>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	330c      	adds	r3, #12
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200009cc 	.word	0x200009cc
 80024f8:	200009c8 	.word	0x200009c8

080024fc <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <Standard_SetInterface+0x7c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	4a1c      	ldr	r2, [pc, #112]	; (800257c <Standard_SetInterface+0x80>)
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	7950      	ldrb	r0, [r2, #5]
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <Standard_SetInterface+0x80>)
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	78d2      	ldrb	r2, [r2, #3]
 8002514:	4611      	mov	r1, r2
 8002516:	4798      	blx	r3
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]

  if (pInformation->Current_Configuration != 0)
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <Standard_SetInterface+0x80>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	7a9b      	ldrb	r3, [r3, #10]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d023      	beq.n	800256e <Standard_SetInterface+0x72>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <Standard_SetInterface+0x44>
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <Standard_SetInterface+0x80>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	791b      	ldrb	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d104      	bne.n	8002540 <Standard_SetInterface+0x44>
        || (pInformation->USBwValue1 != 0))
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <Standard_SetInterface+0x80>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	789b      	ldrb	r3, [r3, #2]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <Standard_SetInterface+0x48>
    {
      return  USB_UNSUPPORT;
 8002540:	2302      	movs	r3, #2
 8002542:	e015      	b.n	8002570 <Standard_SetInterface+0x74>
    }
    else if (Re == USB_SUCCESS)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d111      	bne.n	800256e <Standard_SetInterface+0x72>
    {
      pUser_Standard_Requests->User_SetInterface();
 800254a:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <Standard_SetInterface+0x84>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <Standard_SetInterface+0x80>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a09      	ldr	r2, [pc, #36]	; (800257c <Standard_SetInterface+0x80>)
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	7952      	ldrb	r2, [r2, #5]
 800255c:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <Standard_SetInterface+0x80>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a06      	ldr	r2, [pc, #24]	; (800257c <Standard_SetInterface+0x80>)
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	78d2      	ldrb	r2, [r2, #3]
 8002568:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 800256a:	2300      	movs	r3, #0
 800256c:	e000      	b.n	8002570 <Standard_SetInterface+0x74>
    }

  }

  return USB_UNSUPPORT;
 800256e:	2302      	movs	r3, #2
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200009a4 	.word	0x200009a4
 800257c:	200009cc 	.word	0x200009cc
 8002580:	200009c8 	.word	0x200009c8

08002584 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <Standard_GetStatus+0x1c>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8002594:	4b45      	ldr	r3, [pc, #276]	; (80026ac <Standard_GetStatus+0x128>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2202      	movs	r2, #2
 800259a:	821a      	strh	r2, [r3, #16]
    return 0;
 800259c:	2300      	movs	r3, #0
 800259e:	e080      	b.n	80026a2 <Standard_GetStatus+0x11e>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 80025a0:	4b43      	ldr	r3, [pc, #268]	; (80026b0 <Standard_GetStatus+0x12c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	801a      	strh	r2, [r3, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <Standard_GetStatus+0x128>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d12c      	bne.n	800260e <Standard_GetStatus+0x8a>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 80025b4:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <Standard_GetStatus+0x128>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	7a5b      	ldrb	r3, [r3, #9]
 80025ba:	737b      	strb	r3, [r7, #13]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80025bc:	7b7b      	ldrb	r3, [r7, #13]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <Standard_GetStatus+0x52>
    {
      SetBit(StatusInfo0, 1);
 80025c6:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <Standard_GetStatus+0x12c>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b37      	ldr	r3, [pc, #220]	; (80026b0 <Standard_GetStatus+0x12c>)
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e006      	b.n	80025e4 <Standard_GetStatus+0x60>
    }
    else
    {
      ClrBit(StatusInfo0, 1);
 80025d6:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <Standard_GetStatus+0x12c>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	f023 0302 	bic.w	r3, r3, #2
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b33      	ldr	r3, [pc, #204]	; (80026b0 <Standard_GetStatus+0x12c>)
 80025e2:	701a      	strb	r2, [r3, #0]
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80025e4:	7b7b      	ldrb	r3, [r7, #13]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <Standard_GetStatus+0x7a>
    {
      SetBit(StatusInfo0, 0);
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <Standard_GetStatus+0x12c>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <Standard_GetStatus+0x12c>)
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e04c      	b.n	8002698 <Standard_GetStatus+0x114>
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 80025fe:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <Standard_GetStatus+0x12c>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <Standard_GetStatus+0x12c>)
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e044      	b.n	8002698 <Standard_GetStatus+0x114>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <Standard_GetStatus+0x128>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <Standard_GetStatus+0x9c>
  {
    return (uint8_t *)&StatusInfo;
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <Standard_GetStatus+0x12c>)
 800261e:	e040      	b.n	80026a2 <Standard_GetStatus+0x11e>
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <Standard_GetStatus+0x128>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800262a:	2b02      	cmp	r3, #2
 800262c:	d132      	bne.n	8002694 <Standard_GetStatus+0x110>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <Standard_GetStatus+0x128>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	795b      	ldrb	r3, [r3, #5]
 8002634:	73fb      	strb	r3, [r7, #15]

    Related_Endpoint = (wIndex0 & 0x0f);
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	73bb      	strb	r3, [r7, #14]
    if (ValBit(wIndex0, 7))
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	da12      	bge.n	800266c <Standard_GetStatus+0xe8>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8002646:	7bbb      	ldrb	r3, [r7, #14]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800264e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002658:	2b10      	cmp	r3, #16
 800265a:	d11d      	bne.n	8002698 <Standard_GetStatus+0x114>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <Standard_GetStatus+0x12c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <Standard_GetStatus+0x12c>)
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e015      	b.n	8002698 <Standard_GetStatus+0x114>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800266c:	7bbb      	ldrb	r3, [r7, #14]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002674:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	d109      	bne.n	8002698 <Standard_GetStatus+0x114>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <Standard_GetStatus+0x12c>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <Standard_GetStatus+0x12c>)
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e001      	b.n	8002698 <Standard_GetStatus+0x114>
    }

  }
  else
  {
    return NULL;
 8002694:	2300      	movs	r3, #0
 8002696:	e004      	b.n	80026a2 <Standard_GetStatus+0x11e>
  }
  pUser_Standard_Requests->User_GetStatus();
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <Standard_GetStatus+0x130>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <Standard_GetStatus+0x12c>)
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200009cc 	.word	0x200009cc
 80026b0:	200009d4 	.word	0x200009d4
 80026b4:	200009c8 	.word	0x200009c8

080026b8 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
  uint32_t     Type_Rec = Type_Recipient;
 80026be:	4b6d      	ldr	r3, [pc, #436]	; (8002874 <Standard_ClearFeature+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c8:	613b      	str	r3, [r7, #16]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <Standard_ClearFeature+0x2e>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80026d0:	4b68      	ldr	r3, [pc, #416]	; (8002874 <Standard_ClearFeature+0x1bc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a67      	ldr	r2, [pc, #412]	; (8002874 <Standard_ClearFeature+0x1bc>)
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	7a52      	ldrb	r2, [r2, #9]
 80026da:	f022 0220 	bic.w	r2, r2, #32
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e0c2      	b.n	800286c <Standard_ClearFeature+0x1b4>
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	f040 80be 	bne.w	800286a <Standard_ClearFeature+0x1b2>
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80026ee:	4b61      	ldr	r3, [pc, #388]	; (8002874 <Standard_ClearFeature+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	885b      	ldrh	r3, [r3, #2]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d104      	bne.n	8002702 <Standard_ClearFeature+0x4a>
        || (pInformation->USBwIndex1 != 0))
 80026f8:	4b5e      	ldr	r3, [pc, #376]	; (8002874 <Standard_ClearFeature+0x1bc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	791b      	ldrb	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <Standard_ClearFeature+0x4e>
    {
      return USB_UNSUPPORT;
 8002702:	2302      	movs	r3, #2
 8002704:	e0b2      	b.n	800286c <Standard_ClearFeature+0x1b4>
    }

    pDev = &Device_Table;
 8002706:	4b5c      	ldr	r3, [pc, #368]	; (8002878 <Standard_ClearFeature+0x1c0>)
 8002708:	60fb      	str	r3, [r7, #12]
    wIndex0 = pInformation->USBwIndex0;
 800270a:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <Standard_ClearFeature+0x1bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	795b      	ldrb	r3, [r3, #5]
 8002710:	60bb      	str	r3, [r7, #8]
    rEP = wIndex0 & ~0x80;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002718:	607b      	str	r3, [r7, #4]
    Related_Endpoint = ENDP0 + rEP;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
 800271e:	4b55      	ldr	r3, [pc, #340]	; (8002874 <Standard_ClearFeature+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	795b      	ldrb	r3, [r3, #5]
 8002724:	b25b      	sxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	da0a      	bge.n	8002740 <Standard_ClearFeature+0x88>
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002732:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	e009      	b.n	8002754 <Standard_ClearFeature+0x9c>
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002748:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002752:	617b      	str	r3, [r7, #20]
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	d907      	bls.n	8002770 <Standard_ClearFeature+0xb8>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <Standard_ClearFeature+0xb8>
        || (pInformation->Current_Configuration == 0))
 8002766:	4b43      	ldr	r3, [pc, #268]	; (8002874 <Standard_ClearFeature+0x1bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	7a9b      	ldrb	r3, [r3, #10]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
 8002770:	2302      	movs	r3, #2
 8002772:	e07b      	b.n	800286c <Standard_ClearFeature+0x1b4>
    }


    if (wIndex0 & 0x80)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <Standard_ClearFeature+0xf4>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002786:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002790:	2b10      	cmp	r3, #16
 8002792:	d164      	bne.n	800285e <Standard_ClearFeature+0x1a6>
      {
      #ifndef STM32F10X_CL
        ClearDTOG_TX(Related_Endpoint);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe ff6b 	bl	8001674 <ClearDTOG_TX>
      #endif /* STM32F10X_CL */
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2130      	movs	r1, #48	; 0x30
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fc97 	bl	80010d8 <SetEPTxStatus>
 80027aa:	e058      	b.n	800285e <Standard_ClearFeature+0x1a6>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027b4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	d14c      	bne.n	800285e <Standard_ClearFeature+0x1a6>
      {
        if (Related_Endpoint == ENDP0)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d127      	bne.n	800281a <Standard_ClearFeature+0x162>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4b2b      	ldr	r3, [pc, #172]	; (800287c <Standard_ClearFeature+0x1c4>)
 80027d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f7ff f877 	bl	80018cc <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027e6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f6:	b29c      	uxth	r4, r3
 80027f8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80027fc:	b29c      	uxth	r4, r3
 80027fe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002802:	b29c      	uxth	r4, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800280c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002810:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <Standard_ClearFeature+0x1c8>)
 8002812:	4322      	orrs	r2, r4
 8002814:	b292      	uxth	r2, r2
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e021      	b.n	800285e <Standard_ClearFeature+0x1a6>
        }
        else
        {
        #ifndef STM32F10X_CL
          ClearDTOG_RX(Related_Endpoint);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fefc 	bl	800161c <ClearDTOG_RX>
        #endif /* STM32F10X_CL */
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800282c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	b29b      	uxth	r3, r3
 8002834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283c:	b29c      	uxth	r4, r3
 800283e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002842:	b29c      	uxth	r4, r3
 8002844:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002848:	b29c      	uxth	r4, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002852:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <Standard_ClearFeature+0x1c8>)
 8002858:	4322      	orrs	r2, r4
 800285a:	b292      	uxth	r2, r2
 800285c:	601a      	str	r2, [r3, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <Standard_ClearFeature+0x1cc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	4798      	blx	r3
    return USB_SUCCESS;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <Standard_ClearFeature+0x1b4>
  }

  return USB_UNSUPPORT;
 800286a:	2302      	movs	r3, #2
}
 800286c:	4618      	mov	r0, r3
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd90      	pop	{r4, r7, pc}
 8002874:	200009cc 	.word	0x200009cc
 8002878:	20000008 	.word	0x20000008
 800287c:	2000000c 	.word	0x2000000c
 8002880:	ffff8080 	.word	0xffff8080
 8002884:	200009c8 	.word	0x200009c8

08002888 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800288e:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <Standard_SetEndPointFeature+0x100>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	795b      	ldrb	r3, [r3, #5]
 8002894:	60bb      	str	r3, [r7, #8]
  rEP = wIndex0 & ~0x80;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800289c:	607b      	str	r3, [r7, #4]
  Related_Endpoint = ENDP0 + rEP;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <Standard_SetEndPointFeature+0x100>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	795b      	ldrb	r3, [r3, #5]
 80028a8:	b25b      	sxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	da0a      	bge.n	80028c4 <Standard_SetEndPointFeature+0x3c>
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028b6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e009      	b.n	80028d8 <Standard_SetEndPointFeature+0x50>
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028cc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80028d6:	60fb      	str	r3, [r7, #12]
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 80028d8:	4b2c      	ldr	r3, [pc, #176]	; (800298c <Standard_SetEndPointFeature+0x104>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d90c      	bls.n	80028fe <Standard_SetEndPointFeature+0x76>
      || pInformation->USBwValue != 0 || Status == 0
 80028e4:	4b28      	ldr	r3, [pc, #160]	; (8002988 <Standard_SetEndPointFeature+0x100>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	885b      	ldrh	r3, [r3, #2]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <Standard_SetEndPointFeature+0x76>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <Standard_SetEndPointFeature+0x76>
      || pInformation->Current_Configuration == 0)
 80028f4:	4b24      	ldr	r3, [pc, #144]	; (8002988 <Standard_SetEndPointFeature+0x100>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	7a9b      	ldrb	r3, [r3, #10]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <Standard_SetEndPointFeature+0x7a>
  {
    return USB_UNSUPPORT;
 80028fe:	2302      	movs	r3, #2
 8002900:	e03e      	b.n	8002980 <Standard_SetEndPointFeature+0xf8>
  }
  else
  {
    if (wIndex0 & 0x80)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01a      	beq.n	8002942 <Standard_SetEndPointFeature+0xba>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002914:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002924:	b29c      	uxth	r4, r3
 8002926:	f084 0310 	eor.w	r3, r4, #16
 800292a:	b29c      	uxth	r4, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002934:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002938:	4a15      	ldr	r2, [pc, #84]	; (8002990 <Standard_SetEndPointFeature+0x108>)
 800293a:	4322      	orrs	r2, r4
 800293c:	b292      	uxth	r2, r2
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e019      	b.n	8002976 <Standard_SetEndPointFeature+0xee>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800294a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	b29c      	uxth	r4, r3
 800295c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002960:	b29c      	uxth	r4, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800296a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800296e:	4a08      	ldr	r2, [pc, #32]	; (8002990 <Standard_SetEndPointFeature+0x108>)
 8002970:	4322      	orrs	r2, r4
 8002972:	b292      	uxth	r2, r2
 8002974:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <Standard_SetEndPointFeature+0x10c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4798      	blx	r3
  return USB_SUCCESS;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	200009cc 	.word	0x200009cc
 800298c:	20000008 	.word	0x20000008
 8002990:	ffff8080 	.word	0xffff8080
 8002994:	200009c8 	.word	0x200009c8

08002998 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  SetBit(pInformation->Current_Feature, 5);
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <Standard_SetDeviceFeature+0x24>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a06      	ldr	r2, [pc, #24]	; (80029bc <Standard_SetDeviceFeature+0x24>)
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	7a52      	ldrb	r2, [r2, #9]
 80029a6:	f042 0220 	orr.w	r2, r2, #32
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <Standard_SetDeviceFeature+0x28>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	4798      	blx	r3
  return USB_SUCCESS;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	200009cc 	.word	0x200009cc
 80029c0:	200009c8 	.word	0x200009c8

080029c4 <Standard_GetDescriptorData>:
* Return         : Address of a part of the descriptor pointed by the Usb_
*                  wOffset The buffer pointed by this address contains at least
*                  Length bytes.
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	80fb      	strh	r3, [r7, #6]
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80029d0:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <Standard_GetDescriptorData+0x44>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	8a5b      	ldrh	r3, [r3, #18]
 80029d6:	60fb      	str	r3, [r7, #12]
  if (Length == 0)
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <Standard_GetDescriptorData+0x30>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <Standard_GetDescriptorData+0x44>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	8891      	ldrh	r1, [r2, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	b292      	uxth	r2, r2
 80029ea:	1a8a      	subs	r2, r1, r2
 80029ec:	b292      	uxth	r2, r2
 80029ee:	821a      	strh	r2, [r3, #16]
    return 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e003      	b.n	80029fc <Standard_GetDescriptorData+0x38>
  }

  return pDesc->Descriptor + wOffset;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4413      	add	r3, r2
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	200009cc 	.word	0x200009cc

08002a0c <DataStageOut>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageOut(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8002a12:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <DataStageOut+0xf0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3310      	adds	r3, #16
 8002a18:	60bb      	str	r3, [r7, #8]
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	607b      	str	r3, [r7, #4]

  if (pEPinfo->CopyData && save_rLength)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d02d      	beq.n	8002a84 <DataStageOut+0x78>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d02a      	beq.n	8002a84 <DataStageOut+0x78>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	889b      	ldrh	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]
    if (Length > save_rLength)
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d901      	bls.n	8002a40 <DataStageOut+0x34>
    {
      Length = save_rLength;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60fb      	str	r3, [r7, #12]
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	b292      	uxth	r2, r2
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4798      	blx	r3
 8002a4c:	6038      	str	r0, [r7, #0]
    pEPinfo->Usb_rLength -= Length;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	801a      	strh	r2, [r3, #0]
    pEPinfo->Usb_rOffset += Length;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	885a      	ldrh	r2, [r3, #2]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	805a      	strh	r2, [r3, #2]

  #ifdef STM32F10X_CL  
    PCD_EP_Read(ENDP0, Buffer, Length); 
  #else  
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fe fec2 	bl	80017f8 <GetEPRxAddr>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4619      	mov	r1, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6838      	ldr	r0, [r7, #0]
 8002a80:	f7ff fa9c 	bl	8001fbc <PMAToUserBufferCopy>
  #endif  /* STM32F10X_CL */
  }

  if (pEPinfo->Usb_rLength != 0)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <DataStageOut+0x96>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <DataStageOut+0xf4>)
 8002a8e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002a92:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8002a94:	2100      	movs	r1, #0
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fe fec8 	bl	800182c <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <DataStageOut+0xf8>)
 8002a9e:	2230      	movs	r2, #48	; 0x30
 8002aa0:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	881a      	ldrh	r2, [r3, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	889b      	ldrh	r3, [r3, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d304      	bcc.n	8002ab8 <DataStageOut+0xac>
  {
    pInformation->ControlState = OUT_DATA;
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <DataStageOut+0xf0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	721a      	strb	r2, [r3, #8]
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
    }
  }
}
 8002ab6:	e01c      	b.n	8002af2 <DataStageOut+0xe6>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <DataStageOut+0xbe>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <DataStageOut+0xf0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2205      	movs	r2, #5
 8002ac6:	721a      	strb	r2, [r3, #8]
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
    }
  }
}
 8002ac8:	e013      	b.n	8002af2 <DataStageOut+0xe6>
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <DataStageOut+0xe6>
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <DataStageOut+0xf0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2206      	movs	r2, #6
 8002ad8:	721a      	strb	r2, [r3, #8]
      USB_StatusIn();
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <DataStageOut+0xfc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <DataStageOut+0x100>)
 8002ae2:	4413      	add	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <DataStageOut+0xf8>)
 8002aee:	2230      	movs	r2, #48	; 0x30
 8002af0:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200009cc 	.word	0x200009cc
 8002b00:	2000099c 	.word	0x2000099c
 8002b04:	2000099e 	.word	0x2000099e
 8002b08:	40005c50 	.word	0x40005c50
 8002b0c:	20003002 	.word	0x20003002

08002b10 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <DataStageIn+0xf4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3310      	adds	r3, #16
 8002b1c:	60fb      	str	r3, [r7, #12]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]
  uint32_t ControlState = pInformation->ControlState;
 8002b24:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <DataStageIn+0xf4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	7a1b      	ldrb	r3, [r3, #8]
 8002b2a:	617b      	str	r3, [r7, #20]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d11e      	bne.n	8002b70 <DataStageIn+0x60>
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d11b      	bne.n	8002b70 <DataStageIn+0x60>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8002b38:	4b33      	ldr	r3, [pc, #204]	; (8002c08 <DataStageIn+0xf8>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d111      	bne.n	8002b64 <DataStageIn+0x54>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8002b40:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <DataStageIn+0xfc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <DataStageIn+0x100>)
 8002b48:	4413      	add	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2300      	movs	r3, #0
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b30      	ldr	r3, [pc, #192]	; (8002c14 <DataStageIn+0x104>)
 8002b54:	2230      	movs	r2, #48	; 0x30
 8002b56:	801a      	strh	r2, [r3, #0]
      ControlState = LAST_IN_DATA;
 8002b58:	2304      	movs	r3, #4
 8002b5a:	617b      	str	r3, [r7, #20]
      Data_Mul_MaxPacketSize = FALSE;
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <DataStageIn+0xf8>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
    #ifndef STM32F10X_CL 
      vSetEPTxStatus(EP_TX_STALL);
    #endif  /* STM32F10X_CL */ 
    }
    
    goto Expect_Status_Out;
 8002b62:	e045      	b.n	8002bf0 <DataStageIn+0xe0>
      Data_Mul_MaxPacketSize = FALSE;
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 8002b64:	2307      	movs	r3, #7
 8002b66:	617b      	str	r3, [r7, #20]
    #ifdef STM32F10X_CL      
      PCD_EP_Read (ENDP0, 0, 0);
    #endif  /* STM32F10X_CL */ 
    
    #ifndef STM32F10X_CL 
      vSetEPTxStatus(EP_TX_STALL);
 8002b68:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <DataStageIn+0x104>)
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	801a      	strh	r2, [r3, #0]
    #endif  /* STM32F10X_CL */ 
    }
    
    goto Expect_Status_Out;
 8002b6e:	e03f      	b.n	8002bf0 <DataStageIn+0xe0>
  }

  Length = pEPinfo->PacketSize;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	889b      	ldrh	r3, [r3, #4]
 8002b74:	613b      	str	r3, [r7, #16]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d801      	bhi.n	8002b82 <DataStageIn+0x72>
 8002b7e:	2304      	movs	r3, #4
 8002b80:	e000      	b.n	8002b84 <DataStageIn+0x74>
 8002b82:	2302      	movs	r3, #2
 8002b84:	617b      	str	r3, [r7, #20]

  if (Length > save_wLength)
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d901      	bls.n	8002b92 <DataStageIn+0x82>
  {
    Length = save_wLength;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	613b      	str	r3, [r7, #16]
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	b292      	uxth	r2, r2
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4798      	blx	r3
 8002b9e:	6078      	str	r0, [r7, #4]

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7fe fe0f 	bl	80017c4 <GetEPTxAddr>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4619      	mov	r1, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff f9c9 	bl	8001f48 <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4619      	mov	r1, r3
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7fe fe35 	bl	800182c <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	881a      	ldrh	r2, [r3, #0]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	801a      	strh	r2, [r3, #0]
  pEPinfo->Usb_wOffset += Length;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	885a      	ldrh	r2, [r3, #2]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	805a      	strh	r2, [r3, #2]
  vSetEPTxStatus(EP_TX_VALID);
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <DataStageIn+0x104>)
 8002be4:	2230      	movs	r2, #48	; 0x30
 8002be6:	801a      	strh	r2, [r3, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <DataStageIn+0x108>)
 8002bea:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002bee:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <DataStageIn+0xf4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	721a      	strb	r2, [r3, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200009cc 	.word	0x200009cc
 8002c08:	20000141 	.word	0x20000141
 8002c0c:	40005c50 	.word	0x40005c50
 8002c10:	20003002 	.word	0x20003002
 8002c14:	2000099e 	.word	0x2000099e
 8002c18:	2000099c 	.word	0x2000099c

08002c1c <NoData_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
  RESULT Result = USB_UNSUPPORT;
 8002c22:	2302      	movs	r3, #2
 8002c24:	73fb      	strb	r3, [r7, #15]
  uint32_t RequestNo = pInformation->USBbRequest;
 8002c26:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <NoData_Setup0+0x17c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	607b      	str	r3, [r7, #4]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002c2e:	4b5a      	ldr	r3, [pc, #360]	; (8002d98 <NoData_Setup0+0x17c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d156      	bne.n	8002cea <NoData_Setup0+0xce>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b09      	cmp	r3, #9
 8002c40:	d104      	bne.n	8002c4c <NoData_Setup0+0x30>
    {
      Result = Standard_SetConfiguration();
 8002c42:	f7ff fc15 	bl	8002470 <Standard_SetConfiguration>
 8002c46:	4603      	mov	r3, r0
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	e076      	b.n	8002d3a <NoData_Setup0+0x11e>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d11a      	bne.n	8002c88 <NoData_Setup0+0x6c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8002c52:	4b51      	ldr	r3, [pc, #324]	; (8002d98 <NoData_Setup0+0x17c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	78db      	ldrb	r3, [r3, #3]
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0e      	blt.n	8002c7c <NoData_Setup0+0x60>
 8002c5e:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <NoData_Setup0+0x17c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	789b      	ldrb	r3, [r3, #2]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <NoData_Setup0+0x60>
          || (pInformation->USBwIndex != 0)
 8002c68:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <NoData_Setup0+0x17c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	889b      	ldrh	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d104      	bne.n	8002c7c <NoData_Setup0+0x60>
          || (pInformation->Current_Configuration != 0))
 8002c72:	4b49      	ldr	r3, [pc, #292]	; (8002d98 <NoData_Setup0+0x17c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	7a9b      	ldrb	r3, [r3, #10]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <NoData_Setup0+0x66>
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	60bb      	str	r3, [r7, #8]
        goto exit_NoData_Setup0;
 8002c80:	e081      	b.n	8002d86 <NoData_Setup0+0x16a>
      }
      else
      {
        Result = USB_SUCCESS;
 8002c82:	2300      	movs	r3, #0
 8002c84:	73fb      	strb	r3, [r7, #15]
 8002c86:	e058      	b.n	8002d3a <NoData_Setup0+0x11e>
         SetDeviceAddress(pInformation->USBwValue0);
      #endif  /* STM32F10X_CL */
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d111      	bne.n	8002cb2 <NoData_Setup0+0x96>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8002c8e:	4b42      	ldr	r3, [pc, #264]	; (8002d98 <NoData_Setup0+0x17c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	78db      	ldrb	r3, [r3, #3]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d109      	bne.n	8002cac <NoData_Setup0+0x90>
          && (pInformation->USBwIndex == 0))
 8002c98:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <NoData_Setup0+0x17c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	889b      	ldrh	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d104      	bne.n	8002cac <NoData_Setup0+0x90>
      {
        Result = Standard_SetDeviceFeature();
 8002ca2:	f7ff fe79 	bl	8002998 <Standard_SetDeviceFeature>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	e046      	b.n	8002d3a <NoData_Setup0+0x11e>
      }
      else
      {
        Result = USB_UNSUPPORT;
 8002cac:	2302      	movs	r3, #2
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	e043      	b.n	8002d3a <NoData_Setup0+0x11e>
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d140      	bne.n	8002d3a <NoData_Setup0+0x11e>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8002cb8:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <NoData_Setup0+0x17c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	78db      	ldrb	r3, [r3, #3]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d110      	bne.n	8002ce4 <NoData_Setup0+0xc8>
          && pInformation->USBwIndex == 0
 8002cc2:	4b35      	ldr	r3, [pc, #212]	; (8002d98 <NoData_Setup0+0x17c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	889b      	ldrh	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <NoData_Setup0+0xc8>
          && ValBit(pInformation->Current_Feature, 5))
 8002ccc:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <NoData_Setup0+0x17c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	7a5b      	ldrb	r3, [r3, #9]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <NoData_Setup0+0xc8>
      {
        Result = Standard_ClearFeature();
 8002cda:	f7ff fced 	bl	80026b8 <Standard_ClearFeature>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e02a      	b.n	8002d3a <NoData_Setup0+0x11e>
      }
      else
      {
        Result = USB_UNSUPPORT;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	e027      	b.n	8002d3a <NoData_Setup0+0x11e>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002cea:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <NoData_Setup0+0x17c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d107      	bne.n	8002d08 <NoData_Setup0+0xec>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b0b      	cmp	r3, #11
 8002cfc:	d11d      	bne.n	8002d3a <NoData_Setup0+0x11e>
    {
      Result = Standard_SetInterface();
 8002cfe:	f7ff fbfd 	bl	80024fc <Standard_SetInterface>
 8002d02:	4603      	mov	r3, r0
 8002d04:	73fb      	strb	r3, [r7, #15]
 8002d06:	e018      	b.n	8002d3a <NoData_Setup0+0x11e>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002d08:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <NoData_Setup0+0x17c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d10f      	bne.n	8002d36 <NoData_Setup0+0x11a>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d104      	bne.n	8002d26 <NoData_Setup0+0x10a>
    {
      Result = Standard_ClearFeature();
 8002d1c:	f7ff fccc 	bl	80026b8 <Standard_ClearFeature>
 8002d20:	4603      	mov	r3, r0
 8002d22:	73fb      	strb	r3, [r7, #15]
 8002d24:	e009      	b.n	8002d3a <NoData_Setup0+0x11e>
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d106      	bne.n	8002d3a <NoData_Setup0+0x11e>
    {
      Result = Standard_SetEndPointFeature();
 8002d2c:	f7ff fdac 	bl	8002888 <Standard_SetEndPointFeature>
 8002d30:	4603      	mov	r3, r0
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	e001      	b.n	8002d3a <NoData_Setup0+0x11e>
    }
  }
  else
  {
    Result = USB_UNSUPPORT;
 8002d36:	2302      	movs	r3, #2
 8002d38:	73fb      	strb	r3, [r7, #15]
  }


  if (Result != USB_SUCCESS)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <NoData_Setup0+0x142>
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <NoData_Setup0+0x180>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4798      	blx	r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	73fb      	strb	r3, [r7, #15]
    if (Result == USB_NOT_READY)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d102      	bne.n	8002d5e <NoData_Setup0+0x142>
    {
      ControlState = PAUSE;
 8002d58:	2309      	movs	r3, #9
 8002d5a:	60bb      	str	r3, [r7, #8]
      goto exit_NoData_Setup0;
 8002d5c:	e013      	b.n	8002d86 <NoData_Setup0+0x16a>
    }
  }

  if (Result != USB_SUCCESS)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <NoData_Setup0+0x14e>
  {
    ControlState = STALLED;
 8002d64:	2308      	movs	r3, #8
 8002d66:	60bb      	str	r3, [r7, #8]
    goto exit_NoData_Setup0;
 8002d68:	e00d      	b.n	8002d86 <NoData_Setup0+0x16a>
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 8002d6a:	2306      	movs	r3, #6
 8002d6c:	60bb      	str	r3, [r7, #8]

  USB_StatusIn();
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <NoData_Setup0+0x184>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <NoData_Setup0+0x188>)
 8002d76:	4413      	add	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <NoData_Setup0+0x18c>)
 8002d82:	2230      	movs	r2, #48	; 0x30
 8002d84:	801a      	strh	r2, [r3, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <NoData_Setup0+0x17c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	721a      	strb	r2, [r3, #8]
  return;
 8002d90:	bf00      	nop
}
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200009cc 	.word	0x200009cc
 8002d9c:	200009a4 	.word	0x200009a4
 8002da0:	40005c50 	.word	0x40005c50
 8002da4:	20003002 	.word	0x20003002
 8002da8:	2000099e 	.word	0x2000099e

08002dac <Data_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Data_Setup0(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8002db2:	4b92      	ldr	r3, [pc, #584]	; (8002ffc <Data_Setup0+0x250>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	61bb      	str	r3, [r7, #24]
  uint32_t Related_Endpoint, Reserved;
  uint32_t wOffset, Status;



  CopyRoutine = NULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
  wOffset = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d124      	bne.n	8002e12 <Data_Setup0+0x66>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002dc8:	4b8c      	ldr	r3, [pc, #560]	; (8002ffc <Data_Setup0+0x250>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 80d1 	bne.w	8002f7a <Data_Setup0+0x1ce>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8002dd8:	4b88      	ldr	r3, [pc, #544]	; (8002ffc <Data_Setup0+0x250>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	789b      	ldrb	r3, [r3, #2]
 8002dde:	74fb      	strb	r3, [r7, #19]
      if (wValue1 == DEVICE_DESCRIPTOR)
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d104      	bne.n	8002df0 <Data_Setup0+0x44>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8002de6:	4b86      	ldr	r3, [pc, #536]	; (8003000 <Data_Setup0+0x254>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	e0c4      	b.n	8002f7a <Data_Setup0+0x1ce>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d104      	bne.n	8002e00 <Data_Setup0+0x54>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8002df6:	4b82      	ldr	r3, [pc, #520]	; (8003000 <Data_Setup0+0x254>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	e0bc      	b.n	8002f7a <Data_Setup0+0x1ce>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	f040 80b9 	bne.w	8002f7a <Data_Setup0+0x1ce>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8002e08:	4b7d      	ldr	r3, [pc, #500]	; (8003000 <Data_Setup0+0x254>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e10:	e0b3      	b.n	8002f7a <Data_Setup0+0x1ce>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d175      	bne.n	8002f04 <Data_Setup0+0x158>
 8002e18:	4b78      	ldr	r3, [pc, #480]	; (8002ffc <Data_Setup0+0x250>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	885b      	ldrh	r3, [r3, #2]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d170      	bne.n	8002f04 <Data_Setup0+0x158>
           && (pInformation->USBwLength == 0x0002)
 8002e22:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <Data_Setup0+0x250>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	88db      	ldrh	r3, [r3, #6]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d16b      	bne.n	8002f04 <Data_Setup0+0x158>
           && (pInformation->USBwIndex1 == 0))
 8002e2c:	4b73      	ldr	r3, [pc, #460]	; (8002ffc <Data_Setup0+0x250>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	791b      	ldrb	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d166      	bne.n	8002f04 <Data_Setup0+0x158>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002e36:	4b71      	ldr	r3, [pc, #452]	; (8002ffc <Data_Setup0+0x250>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d107      	bne.n	8002e54 <Data_Setup0+0xa8>
        && (pInformation->USBwIndex == 0))
 8002e44:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <Data_Setup0+0x250>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	889b      	ldrh	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <Data_Setup0+0xa8>
    {
      CopyRoutine = Standard_GetStatus;
 8002e4e:	4b6d      	ldr	r3, [pc, #436]	; (8003004 <Data_Setup0+0x258>)
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002e52:	e091      	b.n	8002f78 <Data_Setup0+0x1cc>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002e54:	4b69      	ldr	r3, [pc, #420]	; (8002ffc <Data_Setup0+0x250>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d113      	bne.n	8002e8a <Data_Setup0+0xde>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8002e62:	4b67      	ldr	r3, [pc, #412]	; (8003000 <Data_Setup0+0x254>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4a64      	ldr	r2, [pc, #400]	; (8002ffc <Data_Setup0+0x250>)
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	7952      	ldrb	r2, [r2, #5]
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4610      	mov	r0, r2
 8002e72:	4798      	blx	r3
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d17e      	bne.n	8002f78 <Data_Setup0+0x1cc>
          && (pInformation->Current_Configuration != 0))
 8002e7a:	4b60      	ldr	r3, [pc, #384]	; (8002ffc <Data_Setup0+0x250>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	7a9b      	ldrb	r3, [r3, #10]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d079      	beq.n	8002f78 <Data_Setup0+0x1cc>
      {
        CopyRoutine = Standard_GetStatus;
 8002e84:	4b5f      	ldr	r3, [pc, #380]	; (8003004 <Data_Setup0+0x258>)
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002e88:	e076      	b.n	8002f78 <Data_Setup0+0x1cc>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002e8a:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <Data_Setup0+0x250>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d16f      	bne.n	8002f78 <Data_Setup0+0x1cc>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8002e98:	4b58      	ldr	r3, [pc, #352]	; (8002ffc <Data_Setup0+0x250>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	795b      	ldrb	r3, [r3, #5]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	60fb      	str	r3, [r7, #12]
      Reserved = pInformation->USBwIndex0 & 0x70;
 8002ea4:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <Data_Setup0+0x250>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	795b      	ldrb	r3, [r3, #5]
 8002eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eae:	60bb      	str	r3, [r7, #8]

      if (ValBit(pInformation->USBwIndex0, 7))
 8002eb0:	4b52      	ldr	r3, [pc, #328]	; (8002ffc <Data_Setup0+0x250>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	795b      	ldrb	r3, [r3, #5]
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da0a      	bge.n	8002ed2 <Data_Setup0+0x126>
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ec4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	e009      	b.n	8002ee6 <Data_Setup0+0x13a>
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002eda:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ee4:	61fb      	str	r3, [r7, #28]
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002ee6:	4b48      	ldr	r3, [pc, #288]	; (8003008 <Data_Setup0+0x25c>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d942      	bls.n	8002f78 <Data_Setup0+0x1cc>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d13f      	bne.n	8002f78 <Data_Setup0+0x1cc>
          && (Status != 0))
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d03c      	beq.n	8002f78 <Data_Setup0+0x1cc>
      {
        CopyRoutine = Standard_GetStatus;
 8002efe:	4b41      	ldr	r3, [pc, #260]	; (8003004 <Data_Setup0+0x258>)
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002f02:	e039      	b.n	8002f78 <Data_Setup0+0x1cc>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d109      	bne.n	8002f1e <Data_Setup0+0x172>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <Data_Setup0+0x250>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d130      	bne.n	8002f7a <Data_Setup0+0x1ce>
    {
      CopyRoutine = Standard_GetConfiguration;
 8002f18:	4b3c      	ldr	r3, [pc, #240]	; (800300c <Data_Setup0+0x260>)
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	e02d      	b.n	8002f7a <Data_Setup0+0x1ce>
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b0a      	cmp	r3, #10
 8002f22:	d12a      	bne.n	8002f7a <Data_Setup0+0x1ce>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002f24:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <Data_Setup0+0x250>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d123      	bne.n	8002f7a <Data_Setup0+0x1ce>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8002f32:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <Data_Setup0+0x250>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	7a9b      	ldrb	r3, [r3, #10]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01e      	beq.n	8002f7a <Data_Setup0+0x1ce>
 8002f3c:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <Data_Setup0+0x250>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	885b      	ldrh	r3, [r3, #2]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d119      	bne.n	8002f7a <Data_Setup0+0x1ce>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8002f46:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <Data_Setup0+0x250>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	791b      	ldrb	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d114      	bne.n	8002f7a <Data_Setup0+0x1ce>
 8002f50:	4b2a      	ldr	r3, [pc, #168]	; (8002ffc <Data_Setup0+0x250>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	88db      	ldrh	r3, [r3, #6]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10f      	bne.n	8002f7a <Data_Setup0+0x1ce>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <Data_Setup0+0x254>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	4a26      	ldr	r2, [pc, #152]	; (8002ffc <Data_Setup0+0x250>)
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	7952      	ldrb	r2, [r2, #5]
 8002f66:	2100      	movs	r1, #0
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4798      	blx	r3
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <Data_Setup0+0x1ce>
    {
      CopyRoutine = Standard_GetInterface;
 8002f72:	4b27      	ldr	r3, [pc, #156]	; (8003010 <Data_Setup0+0x264>)
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	e000      	b.n	8002f7a <Data_Setup0+0x1ce>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002f78:	bf00      	nop
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00f      	beq.n	8002fa0 <Data_Setup0+0x1f4>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8002f80:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <Data_Setup0+0x250>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	b292      	uxth	r2, r2
 8002f88:	825a      	strh	r2, [r3, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <Data_Setup0+0x250>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f90:	619a      	str	r2, [r3, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	2000      	movs	r0, #0
 8002f96:	4798      	blx	r3
    Result = USB_SUCCESS;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9e:	e013      	b.n	8002fc8 <Data_Setup0+0x21c>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8002fa0:	4b17      	ldr	r3, [pc, #92]	; (8003000 <Data_Setup0+0x254>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <Data_Setup0+0x250>)
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	7852      	ldrb	r2, [r2, #1]
 8002fac:	4610      	mov	r0, r2
 8002fae:	4798      	blx	r3
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (Result == USB_NOT_READY)
 8002fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d104      	bne.n	8002fc8 <Data_Setup0+0x21c>
    {
      pInformation->ControlState = PAUSE;
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <Data_Setup0+0x250>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2209      	movs	r2, #9
 8002fc4:	721a      	strb	r2, [r3, #8]
      return;
 8002fc6:	e077      	b.n	80030b8 <Data_Setup0+0x30c>
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <Data_Setup0+0x250>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	8a1b      	ldrh	r3, [r3, #16]
 8002fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d104      	bne.n	8002fe0 <Data_Setup0+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <Data_Setup0+0x250>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2209      	movs	r2, #9
 8002fdc:	721a      	strb	r2, [r3, #8]
    return;
 8002fde:	e06b      	b.n	80030b8 <Data_Setup0+0x30c>
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8002fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d004      	beq.n	8002ff2 <Data_Setup0+0x246>
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <Data_Setup0+0x250>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	8a1b      	ldrh	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d110      	bne.n	8003014 <Data_Setup0+0x268>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8002ff2:	4b02      	ldr	r3, [pc, #8]	; (8002ffc <Data_Setup0+0x250>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	721a      	strb	r2, [r3, #8]
    return;
 8002ffa:	e05d      	b.n	80030b8 <Data_Setup0+0x30c>
 8002ffc:	200009cc 	.word	0x200009cc
 8003000:	200009a4 	.word	0x200009a4
 8003004:	08002585 	.word	0x08002585
 8003008:	20000008 	.word	0x20000008
 800300c:	08002435 	.word	0x08002435
 8003010:	080024c1 	.word	0x080024c1
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8003014:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <Data_Setup0+0x314>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	b25b      	sxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	da42      	bge.n	80030a6 <Data_Setup0+0x2fa>
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8003020:	4b27      	ldr	r3, [pc, #156]	; (80030c0 <Data_Setup0+0x314>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	88db      	ldrh	r3, [r3, #6]
 8003026:	607b      	str	r3, [r7, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <Data_Setup0+0x314>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	8a1b      	ldrh	r3, [r3, #16]
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	429a      	cmp	r2, r3
 8003034:	d905      	bls.n	8003042 <Data_Setup0+0x296>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <Data_Setup0+0x314>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	b292      	uxth	r2, r2
 800303e:	821a      	strh	r2, [r3, #16]
 8003040:	e026      	b.n	8003090 <Data_Setup0+0x2e4>
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8003042:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <Data_Setup0+0x314>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	8a1a      	ldrh	r2, [r3, #16]
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <Data_Setup0+0x314>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	88db      	ldrh	r3, [r3, #6]
 800304e:	429a      	cmp	r2, r3
 8003050:	d21e      	bcs.n	8003090 <Data_Setup0+0x2e4>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8003052:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <Data_Setup0+0x314>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	8a1a      	ldrh	r2, [r3, #16]
 8003058:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <Data_Setup0+0x318>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003060:	b29b      	uxth	r3, r3
 8003062:	429a      	cmp	r2, r3
 8003064:	d203      	bcs.n	800306e <Data_Setup0+0x2c2>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <Data_Setup0+0x31c>)
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e010      	b.n	8003090 <Data_Setup0+0x2e4>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <Data_Setup0+0x314>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	8a1b      	ldrh	r3, [r3, #16]
 8003074:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <Data_Setup0+0x318>)
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800307c:	fb93 f1f2 	sdiv	r1, r3, r2
 8003080:	fb02 f201 	mul.w	r2, r2, r1
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <Data_Setup0+0x2e4>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <Data_Setup0+0x31c>)
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <Data_Setup0+0x314>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <Data_Setup0+0x318>)
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800309c:	b292      	uxth	r2, r2
 800309e:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 80030a0:	f7ff fd36 	bl	8002b10 <DataStageIn>
  {
    pInformation->ControlState = OUT_DATA;
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
  }

  return;
 80030a4:	e008      	b.n	80030b8 <Data_Setup0+0x30c>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <Data_Setup0+0x314>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2203      	movs	r2, #3
 80030ac:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <Data_Setup0+0x320>)
 80030b0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80030b4:	801a      	strh	r2, [r3, #0]
  }

  return;
 80030b6:	bf00      	nop
}
 80030b8:	3728      	adds	r7, #40	; 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200009cc 	.word	0x200009cc
 80030c4:	200009a4 	.word	0x200009a4
 80030c8:	20000141 	.word	0x20000141
 80030cc:	2000099c 	.word	0x2000099c

080030d0 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
  uint16_t offset = 0;
 
  ep = PCD_GetOutEP(ENDP0);
  pBuf.b = ep->xfer_buff;
#else  
  uint16_t offset = 1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	80fb      	strh	r3, [r7, #6]
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 80030da:	4b30      	ldr	r3, [pc, #192]	; (800319c <Setup0_Process+0xcc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <Setup0_Process+0xd0>)
 80030e2:	4413      	add	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030f0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80030f4:	603b      	str	r3, [r7, #0]
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <Setup0_Process+0xd4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	7a1b      	ldrb	r3, [r3, #8]
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d037      	beq.n	8003170 <Setup0_Process+0xa0>
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8003100:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <Setup0_Process+0xd4>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	7013      	strb	r3, [r2, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800310e:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <Setup0_Process+0xd4>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	1c59      	adds	r1, r3, #1
 8003116:	6039      	str	r1, [r7, #0]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	7053      	strb	r3, [r2, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	603b      	str	r3, [r7, #0]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8003126:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <Setup0_Process+0xd4>)
 8003128:	681c      	ldr	r4, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	1c9a      	adds	r2, r3, #2
 800312e:	603a      	str	r2, [r7, #0]
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fef0 	bl	8001f18 <ByteSwap>
 8003138:	4603      	mov	r3, r0
 800313a:	8063      	strh	r3, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	603b      	str	r3, [r7, #0]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <Setup0_Process+0xd4>)
 8003148:	681c      	ldr	r4, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	1c9a      	adds	r2, r3, #2
 800314e:	603a      	str	r2, [r7, #0]
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe fee0 	bl	8001f18 <ByteSwap>
 8003158:	4603      	mov	r3, r0
 800315a:	80a3      	strh	r3, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	603b      	str	r3, [r7, #0]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <Setup0_Process+0xd4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	8812      	ldrh	r2, [r2, #0]
 800316e:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <Setup0_Process+0xd4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <Setup0_Process+0xd4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	88db      	ldrh	r3, [r3, #6]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <Setup0_Process+0xb8>
  {
    /* Setup with no data stage */
    NoData_Setup0();
 8003182:	f7ff fd4b 	bl	8002c1c <NoData_Setup0>
 8003186:	e001      	b.n	800318c <Setup0_Process+0xbc>
  }
  else
  {
    /* Setup with data stage */
    Data_Setup0();
 8003188:	f7ff fe10 	bl	8002dac <Data_Setup0>
  }
  return Post0_Process();
 800318c:	f000 f88e 	bl	80032ac <Post0_Process>
 8003190:	4603      	mov	r3, r0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bd90      	pop	{r4, r7, pc}
 800319a:	bf00      	nop
 800319c:	40005c50 	.word	0x40005c50
 80031a0:	20003004 	.word	0x20003004
 80031a4:	200009cc 	.word	0x200009cc

080031a8 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
 80031ae:	4b1f      	ldr	r3, [pc, #124]	; (800322c <In0_Process+0x84>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	7a1b      	ldrb	r3, [r3, #8]
 80031b4:	607b      	str	r3, [r7, #4]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d002      	beq.n	80031c2 <In0_Process+0x1a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d106      	bne.n	80031d0 <In0_Process+0x28>
  {
    DataStageIn();
 80031c2:	f7ff fca5 	bl	8002b10 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 80031c6:	4b19      	ldr	r3, [pc, #100]	; (800322c <In0_Process+0x84>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	7a1b      	ldrb	r3, [r3, #8]
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	e021      	b.n	8003214 <In0_Process+0x6c>
  }

  else if (ControlState == WAIT_STATUS_IN)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d11c      	bne.n	8003210 <In0_Process+0x68>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <In0_Process+0x84>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d110      	bne.n	8003202 <In0_Process+0x5a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <In0_Process+0x84>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <In0_Process+0x5a>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <In0_Process+0x84>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	78db      	ldrb	r3, [r3, #3]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 f881 	bl	80032fc <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <In0_Process+0x88>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 8003202:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <In0_Process+0x8c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4798      	blx	r3
    ControlState = STALLED;
 800320a:	2308      	movs	r3, #8
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	e001      	b.n	8003214 <In0_Process+0x6c>
  }

  else
  {
    ControlState = STALLED;
 8003210:	2308      	movs	r3, #8
 8003212:	607b      	str	r3, [r7, #4]
  }

  pInformation->ControlState = ControlState;
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <In0_Process+0x84>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800321e:	f000 f845 	bl	80032ac <Post0_Process>
 8003222:	4603      	mov	r3, r0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	200009cc 	.word	0x200009cc
 8003230:	200009c8 	.word	0x200009c8
 8003234:	200009a4 	.word	0x200009a4

08003238 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <Out0_Process+0x6c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	7a1b      	ldrb	r3, [r3, #8]
 8003244:	607b      	str	r3, [r7, #4]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d002      	beq.n	8003252 <Out0_Process+0x1a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d102      	bne.n	8003258 <Out0_Process+0x20>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8003252:	2308      	movs	r3, #8
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	e018      	b.n	800328a <Out0_Process+0x52>
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b03      	cmp	r3, #3
 800325c:	d002      	beq.n	8003264 <Out0_Process+0x2c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b05      	cmp	r3, #5
 8003262:	d106      	bne.n	8003272 <Out0_Process+0x3a>
  {
    DataStageOut();
 8003264:	f7ff fbd2 	bl	8002a0c <DataStageOut>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <Out0_Process+0x6c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	7a1b      	ldrb	r3, [r3, #8]
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	e00b      	b.n	800328a <Out0_Process+0x52>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b07      	cmp	r3, #7
 8003276:	d106      	bne.n	8003286 <Out0_Process+0x4e>
  {
    (*pProperty->Process_Status_OUT)();
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <Out0_Process+0x70>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	4798      	blx	r3
  #ifndef STM32F10X_CL
    ControlState = STALLED;
 8003280:	2308      	movs	r3, #8
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	e001      	b.n	800328a <Out0_Process+0x52>


  /* Unexpect state, STALL the endpoint */
  else
  {
    ControlState = STALLED;
 8003286:	2308      	movs	r3, #8
 8003288:	607b      	str	r3, [r7, #4]
  }

  pInformation->ControlState = ControlState;
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <Out0_Process+0x6c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 8003294:	f000 f80a 	bl	80032ac <Post0_Process>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200009cc 	.word	0x200009cc
 80032a8:	200009a4 	.word	0x200009a4

080032ac <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <Post0_Process+0x40>)
 80032b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	4619      	mov	r1, r3
 80032ba:	2000      	movs	r0, #0
 80032bc:	f7fe fb06 	bl	80018cc <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <Post0_Process+0x44>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	7a1b      	ldrb	r3, [r3, #8]
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d106      	bne.n	80032d8 <Post0_Process+0x2c>
  {
    vSetEPRxStatus(EP_RX_STALL);
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <Post0_Process+0x48>)
 80032cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032d0:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <Post0_Process+0x4c>)
 80032d4:	2210      	movs	r2, #16
 80032d6:	801a      	strh	r2, [r3, #0]
    ep->is_in = 1;
    OTGD_FS_EP0StartXfer(ep);    
  }  
#endif /* STM32F10X_CL */

  return (pInformation->ControlState == PAUSE);
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <Post0_Process+0x44>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	7a1b      	ldrb	r3, [r3, #8]
 80032de:	2b09      	cmp	r3, #9
 80032e0:	bf0c      	ite	eq
 80032e2:	2301      	moveq	r3, #1
 80032e4:	2300      	movne	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	2000000c 	.word	0x2000000c
 80032f0:	200009cc 	.word	0x200009cc
 80032f4:	2000099c 	.word	0x2000099c
 80032f8:	2000099e 	.word	0x2000099e

080032fc <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8003306:	4b19      	ldr	r3, [pc, #100]	; (800336c <SetDeviceAddress+0x70>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	60bb      	str	r3, [r7, #8]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e01d      	b.n	800334e <SetDeviceAddress+0x52>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800331c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	0092      	lsls	r2, r2, #2
 8003326:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800332a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	4611      	mov	r1, r2
 8003332:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003336:	400a      	ands	r2, r1
 8003338:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800333c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003340:	68f9      	ldr	r1, [r7, #12]
 8003342:	b2c9      	uxtb	r1, r1
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3301      	adds	r3, #1
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d3dd      	bcc.n	8003312 <SetDeviceAddress+0x16>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8003356:	4a06      	ldr	r2, [pc, #24]	; (8003370 <SetDeviceAddress+0x74>)
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800335e:	b2db      	uxtb	r3, r3
 8003360:	6013      	str	r3, [r2, #0]
#endif  /* STM32F10X_CL */  
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	20000008 	.word	0x20000008
 8003370:	40005c4c 	.word	0x40005c4c

08003374 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003384:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <RCC_DeInit+0x54>)
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <RCC_DeInit+0x54>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003390:	4910      	ldr	r1, [pc, #64]	; (80033d4 <RCC_DeInit+0x54>)
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <RCC_DeInit+0x54>)
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <RCC_DeInit+0x58>)
 8003398:	4013      	ands	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800339c:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <RCC_DeInit+0x54>)
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <RCC_DeInit+0x54>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80033ac:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <RCC_DeInit+0x54>)
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <RCC_DeInit+0x54>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80033b8:	4a06      	ldr	r2, [pc, #24]	; (80033d4 <RCC_DeInit+0x54>)
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <RCC_DeInit+0x54>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80033c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <RCC_DeInit+0x54>)
 80033c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80033ca:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40021000 	.word	0x40021000
 80033d8:	f8ff0000 	.word	0xf8ff0000

080033dc <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80033e4:	4a13      	ldr	r2, [pc, #76]	; (8003434 <RCC_HSEConfig+0x58>)
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <RCC_HSEConfig+0x58>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80033f0:	4a10      	ldr	r2, [pc, #64]	; (8003434 <RCC_HSEConfig+0x58>)
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <RCC_HSEConfig+0x58>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003402:	d003      	beq.n	800340c <RCC_HSEConfig+0x30>
 8003404:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003408:	d007      	beq.n	800341a <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 800340a:	e00d      	b.n	8003428 <RCC_HSEConfig+0x4c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 800340c:	4a09      	ldr	r2, [pc, #36]	; (8003434 <RCC_HSEConfig+0x58>)
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <RCC_HSEConfig+0x58>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
      break;
 8003418:	e006      	b.n	8003428 <RCC_HSEConfig+0x4c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 800341a:	4a06      	ldr	r2, [pc, #24]	; (8003434 <RCC_HSEConfig+0x58>)
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <RCC_HSEConfig+0x58>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8003424:	6013      	str	r3, [r2, #0]
      break;
 8003426:	bf00      	nop
      
    default:
      break;
  }
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000

08003438 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8003442:	2300      	movs	r3, #0
 8003444:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800344a:	2031      	movs	r0, #49	; 0x31
 800344c:	f000 fb0e 	bl	8003a6c <RCC_GetFlagStatus>
 8003450:	4603      	mov	r3, r0
 8003452:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	3301      	adds	r3, #1
 8003458:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003460:	d002      	beq.n	8003468 <RCC_WaitForHSEStartUp+0x30>
 8003462:	79bb      	ldrb	r3, [r7, #6]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8003468:	2031      	movs	r0, #49	; 0x31
 800346a:	f000 faff 	bl	8003a6c <RCC_GetFlagStatus>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8003474:	2301      	movs	r3, #1
 8003476:	71fb      	strb	r3, [r7, #7]
 8003478:	e001      	b.n	800347e <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800347a:	2300      	movs	r3, #0
 800347c:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 800347e:	79fb      	ldrb	r3, [r7, #7]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <RCC_AdjustHSICalibrationValue+0x38>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80034a2:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
 80034ae:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <RCC_AdjustHSICalibrationValue+0x38>)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000

080034c4 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80034ce:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <RCC_HSICmd+0x1c>)
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	6013      	str	r3, [r2, #0]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	42420000 	.word	0x42420000

080034e4 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <RCC_PLLConfig+0x38>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80034fe:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	4313      	orrs	r3, r2
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800350c:	4a03      	ldr	r2, [pc, #12]	; (800351c <RCC_PLLConfig+0x38>)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6053      	str	r3, [r2, #4]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	40021000 	.word	0x40021000

08003520 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800352a:	4a04      	ldr	r2, [pc, #16]	; (800353c <RCC_PLLCmd+0x1c>)
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	42420060 	.word	0x42420060

08003540 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <RCC_SYSCLKConfig+0x34>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f023 0303 	bic.w	r3, r3, #3
 8003558:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003562:	4a04      	ldr	r2, [pc, #16]	; (8003574 <RCC_SYSCLKConfig+0x34>)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6053      	str	r3, [r2, #4]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000

08003578 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <RCC_GetSYSCLKSource+0x18>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	b2db      	uxtb	r3, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40021000 	.word	0x40021000

08003594 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <RCC_HCLKConfig+0x34>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80035b6:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <RCC_HCLKConfig+0x34>)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6053      	str	r3, [r2, #4]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000

080035cc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <RCC_PCLK1Config+0x34>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80035ee:	4a04      	ldr	r2, [pc, #16]	; (8003600 <RCC_PCLK1Config+0x34>)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6053      	str	r3, [r2, #4]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000

08003604 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8003610:	4b09      	ldr	r3, [pc, #36]	; (8003638 <RCC_PCLK2Config+0x34>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800361c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003628:	4a03      	ldr	r2, [pc, #12]	; (8003638 <RCC_PCLK2Config+0x34>)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6053      	str	r3, [r2, #4]
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	40021000 	.word	0x40021000

0800363c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	460a      	mov	r2, r1
 8003646:	71fb      	strb	r3, [r7, #7]
 8003648:	4613      	mov	r3, r2
 800364a:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800364c:	79bb      	ldrb	r3, [r7, #6]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8003652:	490c      	ldr	r1, [pc, #48]	; (8003684 <RCC_ITConfig+0x48>)
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <RCC_ITConfig+0x48>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	4313      	orrs	r3, r2
 800365e:	b2db      	uxtb	r3, r3
 8003660:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
 8003662:	e009      	b.n	8003678 <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8003664:	4907      	ldr	r1, [pc, #28]	; (8003684 <RCC_ITConfig+0x48>)
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <RCC_ITConfig+0x48>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	43db      	mvns	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4013      	ands	r3, r2
 8003674:	b2db      	uxtb	r3, r3
 8003676:	700b      	strb	r3, [r1, #0]
  }
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40021009 	.word	0x40021009

08003688 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8003690:	4a03      	ldr	r2, [pc, #12]	; (80036a0 <RCC_USBCLKConfig+0x18>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	424200d8 	.word	0x424200d8

080036a4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <RCC_ADCCLKConfig+0x34>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80036c6:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <RCC_ADCCLKConfig+0x34>)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6053      	str	r3, [r2, #4]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000

080036dc <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <RCC_LSEConfig+0x3c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <RCC_LSEConfig+0x3c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d002      	beq.n	80036fe <RCC_LSEConfig+0x22>
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d004      	beq.n	8003706 <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 80036fc:	e007      	b.n	800370e <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <RCC_LSEConfig+0x3c>)
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
      break;
 8003704:	e003      	b.n	800370e <RCC_LSEConfig+0x32>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8003706:	4b04      	ldr	r3, [pc, #16]	; (8003718 <RCC_LSEConfig+0x3c>)
 8003708:	2205      	movs	r2, #5
 800370a:	701a      	strb	r2, [r3, #0]
      break;            
 800370c:	bf00      	nop
      
    default:
      break;      
  }
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr
 8003718:	40021020 	.word	0x40021020

0800371c <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8003726:	4a04      	ldr	r2, [pc, #16]	; (8003738 <RCC_LSICmd+0x1c>)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	42420480 	.word	0x42420480

0800373c <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8003744:	4905      	ldr	r1, [pc, #20]	; (800375c <RCC_RTCCLKConfig+0x20>)
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <RCC_RTCCLKConfig+0x20>)
 8003748:	6a1a      	ldr	r2, [r3, #32]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4313      	orrs	r3, r2
 800374e:	620b      	str	r3, [r1, #32]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000

08003760 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800376a:	4a04      	ldr	r2, [pc, #16]	; (800377c <RCC_RTCCLKCmd+0x1c>)
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	6013      	str	r3, [r2, #0]
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	4242043c 	.word	0x4242043c

08003780 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8003798:	4b4c      	ldr	r3, [pc, #304]	; (80038cc <RCC_GetClocksFreq+0x14c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d007      	beq.n	80037b8 <RCC_GetClocksFreq+0x38>
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d009      	beq.n	80037c0 <RCC_GetClocksFreq+0x40>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d133      	bne.n	8003818 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a47      	ldr	r2, [pc, #284]	; (80038d0 <RCC_GetClocksFreq+0x150>)
 80037b4:	601a      	str	r2, [r3, #0]
      break;
 80037b6:	e033      	b.n	8003820 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a45      	ldr	r2, [pc, #276]	; (80038d0 <RCC_GetClocksFreq+0x150>)
 80037bc:	601a      	str	r2, [r3, #0]
      break;
 80037be:	e02f      	b.n	8003820 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80037c0:	4b42      	ldr	r3, [pc, #264]	; (80038cc <RCC_GetClocksFreq+0x14c>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80037c8:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80037ca:	4b40      	ldr	r3, [pc, #256]	; (80038cc <RCC_GetClocksFreq+0x14c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d2:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	0c9b      	lsrs	r3, r3, #18
 80037d8:	3302      	adds	r3, #2
 80037da:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4a3b      	ldr	r2, [pc, #236]	; (80038d4 <RCC_GetClocksFreq+0x154>)
 80037e6:	fb02 f203 	mul.w	r2, r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80037ee:	e017      	b.n	8003820 <RCC_GetClocksFreq+0xa0>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <RCC_GetClocksFreq+0x14c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d006      	beq.n	800380a <RCC_GetClocksFreq+0x8a>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4a35      	ldr	r2, [pc, #212]	; (80038d4 <RCC_GetClocksFreq+0x154>)
 8003800:	fb02 f203 	mul.w	r2, r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8003808:	e00a      	b.n	8003820 <RCC_GetClocksFreq+0xa0>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4a30      	ldr	r2, [pc, #192]	; (80038d0 <RCC_GetClocksFreq+0x150>)
 800380e:	fb02 f203 	mul.w	r2, r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8003816:	e003      	b.n	8003820 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a2d      	ldr	r2, [pc, #180]	; (80038d0 <RCC_GetClocksFreq+0x150>)
 800381c:	601a      	str	r2, [r3, #0]
      break;
 800381e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8003820:	4b2a      	ldr	r3, [pc, #168]	; (80038cc <RCC_GetClocksFreq+0x14c>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003828:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8003830:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <RCC_GetClocksFreq+0x158>)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	4413      	add	r3, r2
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	40da      	lsrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8003848:	4b20      	ldr	r3, [pc, #128]	; (80038cc <RCC_GetClocksFreq+0x14c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003850:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8003858:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <RCC_GetClocksFreq+0x158>)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	4413      	add	r3, r2
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	40da      	lsrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8003870:	4b16      	ldr	r3, [pc, #88]	; (80038cc <RCC_GetClocksFreq+0x14c>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003878:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	0adb      	lsrs	r3, r3, #11
 800387e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8003880:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <RCC_GetClocksFreq+0x158>)
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4413      	add	r3, r2
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	40da      	lsrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <RCC_GetClocksFreq+0x14c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038a0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	0b9b      	lsrs	r3, r3, #14
 80038a6:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80038a8:	4a0c      	ldr	r2, [pc, #48]	; (80038dc <RCC_GetClocksFreq+0x15c>)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	4413      	add	r3, r2
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	611a      	str	r2, [r3, #16]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	40021000 	.word	0x40021000
 80038d0:	007a1200 	.word	0x007a1200
 80038d4:	003d0900 	.word	0x003d0900
 80038d8:	200000f8 	.word	0x200000f8
 80038dc:	20000108 	.word	0x20000108

080038e0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d006      	beq.n	8003900 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80038f2:	4909      	ldr	r1, [pc, #36]	; (8003918 <RCC_AHBPeriphClockCmd+0x38>)
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <RCC_AHBPeriphClockCmd+0x38>)
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80038fe:	e006      	b.n	800390e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8003900:	4905      	ldr	r1, [pc, #20]	; (8003918 <RCC_AHBPeriphClockCmd+0x38>)
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <RCC_AHBPeriphClockCmd+0x38>)
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	43db      	mvns	r3, r3
 800390a:	4013      	ands	r3, r2
 800390c:	614b      	str	r3, [r1, #20]
  }
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	40021000 	.word	0x40021000

0800391c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d006      	beq.n	800393c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800392e:	4909      	ldr	r1, [pc, #36]	; (8003954 <RCC_APB2PeriphClockCmd+0x38>)
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <RCC_APB2PeriphClockCmd+0x38>)
 8003932:	699a      	ldr	r2, [r3, #24]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4313      	orrs	r3, r2
 8003938:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800393a:	e006      	b.n	800394a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800393c:	4905      	ldr	r1, [pc, #20]	; (8003954 <RCC_APB2PeriphClockCmd+0x38>)
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <RCC_APB2PeriphClockCmd+0x38>)
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	43db      	mvns	r3, r3
 8003946:	4013      	ands	r3, r2
 8003948:	618b      	str	r3, [r1, #24]
  }
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	40021000 	.word	0x40021000

08003958 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800396a:	4909      	ldr	r1, [pc, #36]	; (8003990 <RCC_APB1PeriphClockCmd+0x38>)
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <RCC_APB1PeriphClockCmd+0x38>)
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4313      	orrs	r3, r2
 8003974:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8003976:	e006      	b.n	8003986 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003978:	4905      	ldr	r1, [pc, #20]	; (8003990 <RCC_APB1PeriphClockCmd+0x38>)
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <RCC_APB1PeriphClockCmd+0x38>)
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	43db      	mvns	r3, r3
 8003982:	4013      	ands	r3, r2
 8003984:	61cb      	str	r3, [r1, #28]
  }
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	40021000 	.word	0x40021000

08003994 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d006      	beq.n	80039b4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80039a6:	4909      	ldr	r1, [pc, #36]	; (80039cc <RCC_APB2PeriphResetCmd+0x38>)
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <RCC_APB2PeriphResetCmd+0x38>)
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80039b2:	e006      	b.n	80039c2 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80039b4:	4905      	ldr	r1, [pc, #20]	; (80039cc <RCC_APB2PeriphResetCmd+0x38>)
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <RCC_APB2PeriphResetCmd+0x38>)
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	43db      	mvns	r3, r3
 80039be:	4013      	ands	r3, r2
 80039c0:	60cb      	str	r3, [r1, #12]
  }
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	40021000 	.word	0x40021000

080039d0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80039e2:	4909      	ldr	r1, [pc, #36]	; (8003a08 <RCC_APB1PeriphResetCmd+0x38>)
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <RCC_APB1PeriphResetCmd+0x38>)
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80039ee:	e006      	b.n	80039fe <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80039f0:	4905      	ldr	r1, [pc, #20]	; (8003a08 <RCC_APB1PeriphResetCmd+0x38>)
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <RCC_APB1PeriphResetCmd+0x38>)
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	4013      	ands	r3, r2
 80039fc:	610b      	str	r3, [r1, #16]
  }
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	40021000 	.word	0x40021000

08003a0c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8003a16:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <RCC_BackupResetCmd+0x1c>)
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	6013      	str	r3, [r2, #0]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	42420440 	.word	0x42420440

08003a2c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8003a36:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <RCC_ClockSecuritySystemCmd+0x1c>)
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	4242004c 	.word	0x4242004c

08003a4c <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8003a56:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <RCC_MCOConfig+0x1c>)
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	7013      	strb	r3, [r2, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40021007 	.word	0x40021007

08003a6c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d103      	bne.n	8003a98 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <RCC_GetFlagStatus+0x70>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e009      	b.n	8003aac <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d103      	bne.n	8003aa6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8003a9e:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <RCC_GetFlagStatus+0x70>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	e002      	b.n	8003aac <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <RCC_GetFlagStatus+0x70>)
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	74fb      	strb	r3, [r7, #19]
 8003ac8:	e001      	b.n	8003ace <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000

08003ae0 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <RCC_ClearFlag+0x18>)
 8003ae6:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <RCC_ClearFlag+0x18>)
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aee:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	40021000 	.word	0x40021000

08003afc <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <RCC_GetITStatus+0x30>)
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 8003b16:	2301      	movs	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
 8003b1a:	e001      	b.n	8003b20 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	40021000 	.word	0x40021000

08003b30 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8003b3a:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <RCC_ClearITPendingBit+0x1c>)
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	7013      	strb	r3, [r2, #0]
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	4002100a 	.word	0x4002100a

08003b50 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a2f      	ldr	r2, [pc, #188]	; (8003c18 <GPIO_DeInit+0xc8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d108      	bne.n	8003b72 <GPIO_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003b60:	2101      	movs	r1, #1
 8003b62:	2004      	movs	r0, #4
 8003b64:	f7ff ff16 	bl	8003994 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	2004      	movs	r0, #4
 8003b6c:	f7ff ff12 	bl	8003994 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8003b70:	e04e      	b.n	8003c10 <GPIO_DeInit+0xc0>
  if (GPIOx == GPIOA)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a29      	ldr	r2, [pc, #164]	; (8003c1c <GPIO_DeInit+0xcc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d108      	bne.n	8003b8c <GPIO_DeInit+0x3c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	2008      	movs	r0, #8
 8003b7e:	f7ff ff09 	bl	8003994 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8003b82:	2100      	movs	r1, #0
 8003b84:	2008      	movs	r0, #8
 8003b86:	f7ff ff05 	bl	8003994 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8003b8a:	e041      	b.n	8003c10 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOB)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <GPIO_DeInit+0xd0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d108      	bne.n	8003ba6 <GPIO_DeInit+0x56>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003b94:	2101      	movs	r1, #1
 8003b96:	2010      	movs	r0, #16
 8003b98:	f7ff fefc 	bl	8003994 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	2010      	movs	r0, #16
 8003ba0:	f7ff fef8 	bl	8003994 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8003ba4:	e034      	b.n	8003c10 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOC)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <GPIO_DeInit+0xd4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <GPIO_DeInit+0x70>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8003bae:	2101      	movs	r1, #1
 8003bb0:	2020      	movs	r0, #32
 8003bb2:	f7ff feef 	bl	8003994 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	2020      	movs	r0, #32
 8003bba:	f7ff feeb 	bl	8003994 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8003bbe:	e027      	b.n	8003c10 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOD)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
  }    
  else if (GPIOx == GPIOE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <GPIO_DeInit+0xd8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <GPIO_DeInit+0x8a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8003bc8:	2101      	movs	r1, #1
 8003bca:	2040      	movs	r0, #64	; 0x40
 8003bcc:	f7ff fee2 	bl	8003994 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2040      	movs	r0, #64	; 0x40
 8003bd4:	f7ff fede 	bl	8003994 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8003bd8:	e01a      	b.n	8003c10 <GPIO_DeInit+0xc0>
  else if (GPIOx == GPIOE)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
  } 
  else if (GPIOx == GPIOF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <GPIO_DeInit+0xdc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d108      	bne.n	8003bf4 <GPIO_DeInit+0xa4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8003be2:	2101      	movs	r1, #1
 8003be4:	2080      	movs	r0, #128	; 0x80
 8003be6:	f7ff fed5 	bl	8003994 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8003bea:	2100      	movs	r1, #0
 8003bec:	2080      	movs	r0, #128	; 0x80
 8003bee:	f7ff fed1 	bl	8003994 <RCC_APB2PeriphResetCmd>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8003bf2:	e00d      	b.n	8003c10 <GPIO_DeInit+0xc0>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOG)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <GPIO_DeInit+0xe0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d109      	bne.n	8003c10 <GPIO_DeInit+0xc0>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c02:	f7ff fec7 	bl	8003994 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8003c06:	2100      	movs	r1, #0
 8003c08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c0c:	f7ff fec2 	bl	8003994 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40010800 	.word	0x40010800
 8003c1c:	40010c00 	.word	0x40010c00
 8003c20:	40011000 	.word	0x40011000
 8003c24:	40011400 	.word	0x40011400
 8003c28:	40011800 	.word	0x40011800
 8003c2c:	40011c00 	.word	0x40011c00
 8003c30:	40012000 	.word	0x40012000

08003c34 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8003c38:	2101      	movs	r1, #1
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	f7ff feaa 	bl	8003994 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8003c40:	2100      	movs	r1, #0
 8003c42:	2001      	movs	r0, #1
 8003c44:	f7ff fea6 	bl	8003994 <RCC_APB2PeriphResetCmd>
}
 8003c48:	bf00      	nop
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	78db      	ldrb	r3, [r3, #3]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	78db      	ldrb	r3, [r3, #3]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	789b      	ldrb	r3, [r3, #2]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d044      	beq.n	8003d24 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	e038      	b.n	8003d18 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d126      	bne.n	8003d12 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8003cca:	220f      	movs	r2, #15
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	78db      	ldrb	r3, [r3, #3]
 8003cf0:	2b28      	cmp	r3, #40	; 0x28
 8003cf2:	d105      	bne.n	8003d00 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	615a      	str	r2, [r3, #20]
 8003cfe:	e008      	b.n	8003d12 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	78db      	ldrb	r3, [r3, #3]
 8003d04:	2b48      	cmp	r3, #72	; 0x48
 8003d06:	d104      	bne.n	8003d12 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8003d08:	2201      	movs	r2, #1
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	3301      	adds	r3, #1
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b07      	cmp	r3, #7
 8003d1c:	d9c3      	bls.n	8003ca6 <GPIO_Init+0x5a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	2bff      	cmp	r3, #255	; 0xff
 8003d2a:	d946      	bls.n	8003dba <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	e03a      	b.n	8003dae <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d127      	bne.n	8003da8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8003d5e:	220f      	movs	r2, #15
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	78db      	ldrb	r3, [r3, #3]
 8003d84:	2b28      	cmp	r3, #40	; 0x28
 8003d86:	d105      	bne.n	8003d94 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	78db      	ldrb	r3, [r3, #3]
 8003d98:	2b48      	cmp	r3, #72	; 0x48
 8003d9a:	d105      	bne.n	8003da8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	3308      	adds	r3, #8
 8003da0:	2201      	movs	r2, #1
 8003da2:	409a      	lsls	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	3301      	adds	r3, #1
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	2b07      	cmp	r3, #7
 8003db2:	d9c1      	bls.n	8003d38 <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	605a      	str	r2, [r3, #4]
  }
}
 8003dba:	bf00      	nop
 8003dbc:	3724      	adds	r7, #36	; 0x24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dd2:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	70da      	strb	r2, [r3, #3]
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop

08003dec <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	887b      	ldrh	r3, [r7, #2]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	e001      	b.n	8003e12 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop

08003e20 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	b29b      	uxth	r3, r3
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	887b      	ldrh	r3, [r7, #2]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
 8003e58:	e001      	b.n	8003e5e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop

08003e6c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	b29b      	uxth	r3, r3
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8003e90:	887a      	ldrh	r2, [r7, #2]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	611a      	str	r2, [r3, #16]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8003eac:	887a      	ldrh	r2, [r7, #2]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	615a      	str	r2, [r3, #20]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	807b      	strh	r3, [r7, #2]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8003ecc:	787b      	ldrb	r3, [r7, #1]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8003ed8:	e002      	b.n	8003ee0 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	615a      	str	r2, [r3, #20]
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop

08003eec <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8003ef8:	887a      	ldrh	r2, [r7, #2]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60da      	str	r2, [r3, #12]
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 8003f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f18:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8003f28:	887a      	ldrh	r2, [r7, #2]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	60fb      	str	r3, [r7, #12]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop

08003f4c <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	460a      	mov	r2, r1
 8003f56:	71fb      	strb	r3, [r7, #7]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <GPIO_EventOutputConfig+0x48>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 8003f7a:	79bb      	ldrb	r3, [r7, #6]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
 8003f82:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <GPIO_EventOutputConfig+0x48>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6013      	str	r3, [r2, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000

08003f98 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8003fa2:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <GPIO_EventOutputCmd+0x1c>)
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	4220001c 	.word	0x4220001c

08003fb8 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	da03      	bge.n	8003fe2 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8003fda:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <GPIO_PinRemapConfig+0xdc>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e002      	b.n	8003fe8 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8003fe2:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <GPIO_PinRemapConfig+0xdc>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	0c1b      	lsrs	r3, r3, #16
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ffe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004002:	d10a      	bne.n	800401a <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800400a:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800400c:	4a21      	ldr	r2, [pc, #132]	; (8004094 <GPIO_PinRemapConfig+0xdc>)
 800400e:	4b21      	ldr	r3, [pc, #132]	; (8004094 <GPIO_PinRemapConfig+0xdc>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004016:	6053      	str	r3, [r2, #4]
 8004018:	e021      	b.n	800405e <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00e      	beq.n	8004042 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8004024:	2203      	movs	r2, #3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	43db      	mvns	r3, r3
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4013      	ands	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e00d      	b.n	800405e <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0d5b      	lsrs	r3, r3, #21
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4013      	ands	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800405c:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	0d5b      	lsrs	r3, r3, #21
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	da03      	bge.n	8004084 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 800407c:	4a05      	ldr	r2, [pc, #20]	; (8004094 <GPIO_PinRemapConfig+0xdc>)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8004082:	e002      	b.n	800408a <GPIO_PinRemapConfig+0xd2>
  {
    AFIO->MAPR2 = tmpreg;
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8004084:	4a03      	ldr	r2, [pc, #12]	; (8004094 <GPIO_PinRemapConfig+0xdc>)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6053      	str	r3, [r2, #4]
  }  
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	40010000 	.word	0x40010000

08004098 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8004098:	b490      	push	{r4, r7}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	460a      	mov	r2, r1
 80040a2:	71fb      	strb	r3, [r7, #7]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80040ac:	79bb      	ldrb	r3, [r7, #6]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	220f      	movs	r2, #15
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80040bc:	4916      	ldr	r1, [pc, #88]	; (8004118 <GPIO_EXTILineConfig+0x80>)
 80040be:	79bb      	ldrb	r3, [r7, #6]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4618      	mov	r0, r3
 80040c6:	4a14      	ldr	r2, [pc, #80]	; (8004118 <GPIO_EXTILineConfig+0x80>)
 80040c8:	79bb      	ldrb	r3, [r7, #6]
 80040ca:	089b      	lsrs	r3, r3, #2
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	3302      	adds	r3, #2
 80040d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	401a      	ands	r2, r3
 80040da:	1c83      	adds	r3, r0, #2
 80040dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80040e0:	480d      	ldr	r0, [pc, #52]	; (8004118 <GPIO_EXTILineConfig+0x80>)
 80040e2:	79bb      	ldrb	r3, [r7, #6]
 80040e4:	089b      	lsrs	r3, r3, #2
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	461c      	mov	r4, r3
 80040ea:	4a0b      	ldr	r2, [pc, #44]	; (8004118 <GPIO_EXTILineConfig+0x80>)
 80040ec:	79bb      	ldrb	r3, [r7, #6]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	3302      	adds	r3, #2
 80040f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040f8:	79f9      	ldrb	r1, [r7, #7]
 80040fa:	79bb      	ldrb	r3, [r7, #6]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	fa01 f303 	lsl.w	r3, r1, r3
 8004106:	431a      	orrs	r2, r3
 8004108:	1ca3      	adds	r3, r4, #2
 800410a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bc90      	pop	{r4, r7}
 8004116:	4770      	bx	lr
 8004118:	40010000 	.word	0x40010000

0800411c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8004124:	4a03      	ldr	r2, [pc, #12]	; (8004134 <GPIO_ETH_MediaInterfaceConfig+0x18>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6013      	str	r3, [r2, #0]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	422000dc 	.word	0x422000dc

08004138 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004140:	4a05      	ldr	r2, [pc, #20]	; (8004158 <NVIC_PriorityGroupConfig+0x20>)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414c:	60d3      	str	r3, [r2, #12]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	e000ed00 	.word	0xe000ed00

0800415c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	230f      	movs	r3, #15
 800416e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	78db      	ldrb	r3, [r3, #3]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d03a      	beq.n	80041ee <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004178:	4b27      	ldr	r3, [pc, #156]	; (8004218 <NVIC_Init+0xbc>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	43db      	mvns	r3, r3
 800417e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f1c3 0304 	rsb	r3, r3, #4
 800418c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	fa22 f303 	lsr.w	r3, r2, r3
 8004196:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	461a      	mov	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	789b      	ldrb	r3, [r3, #2]
 80041aa:	461a      	mov	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4013      	ands	r3, r2
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80041bc:	4a17      	ldr	r2, [pc, #92]	; (800421c <NVIC_Init+0xc0>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	6979      	ldr	r1, [r7, #20]
 80041c4:	b2c9      	uxtb	r1, r1
 80041c6:	4413      	add	r3, r2
 80041c8:	460a      	mov	r2, r1
 80041ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80041ce:	4a13      	ldr	r2, [pc, #76]	; (800421c <NVIC_Init+0xc0>)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80041e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80041ec:	e00f      	b.n	800420e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80041ee:	490b      	ldr	r1, [pc, #44]	; (800421c <NVIC_Init+0xc0>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	2201      	movs	r2, #1
 8004204:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004206:	f100 0320 	add.w	r3, r0, #32
 800420a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr
 8004218:	e000ed00 	.word	0xe000ed00
 800421c:	e000e100 	.word	0xe000e100

08004220 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800422a:	4907      	ldr	r1, [pc, #28]	; (8004248 <NVIC_SetVectorTable+0x28>)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004232:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4313      	orrs	r3, r2
 800423a:	608b      	str	r3, [r1, #8]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	e000ed00 	.word	0xe000ed00

0800424c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	460a      	mov	r2, r1
 8004256:	71fb      	strb	r3, [r7, #7]
 8004258:	4613      	mov	r3, r2
 800425a:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800425c:	79bb      	ldrb	r3, [r7, #6]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d006      	beq.n	8004270 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
 8004262:	4909      	ldr	r1, [pc, #36]	; (8004288 <NVIC_SystemLPConfig+0x3c>)
 8004264:	4b08      	ldr	r3, [pc, #32]	; (8004288 <NVIC_SystemLPConfig+0x3c>)
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	4313      	orrs	r3, r2
 800426c:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
 800426e:	e006      	b.n	800427e <NVIC_SystemLPConfig+0x32>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8004270:	4905      	ldr	r1, [pc, #20]	; (8004288 <NVIC_SystemLPConfig+0x3c>)
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <NVIC_SystemLPConfig+0x3c>)
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	43db      	mvns	r3, r3
 800427a:	4013      	ands	r3, r2
 800427c:	610b      	str	r3, [r1, #16]
  }
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b04      	cmp	r3, #4
 8004298:	d106      	bne.n	80042a8 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <SysTick_CLKSourceConfig+0x34>)
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <SysTick_CLKSourceConfig+0x34>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f043 0304 	orr.w	r3, r3, #4
 80042a4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 80042a6:	e005      	b.n	80042b4 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80042a8:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <SysTick_CLKSourceConfig+0x34>)
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <SysTick_CLKSourceConfig+0x34>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 0304 	bic.w	r3, r3, #4
 80042b2:	6013      	str	r3, [r2, #0]
  }
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	e000e010 	.word	0xe000e010

080042c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80042c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80042c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80042ca:	e003      	b.n	80042d4 <LoopCopyDataInit>

080042cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80042ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80042d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80042d2:	3104      	adds	r1, #4

080042d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80042d4:	480b      	ldr	r0, [pc, #44]	; (8004304 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80042d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80042da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80042dc:	d3f6      	bcc.n	80042cc <CopyDataInit>
	ldr	r2, =_sbss
 80042de:	4a0b      	ldr	r2, [pc, #44]	; (800430c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80042e0:	e002      	b.n	80042e8 <LoopFillZerobss>

080042e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80042e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80042e4:	f842 3b04 	str.w	r3, [r2], #4

080042e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80042ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80042ec:	d3f9      	bcc.n	80042e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80042ee:	f7fc fa9d 	bl	800082c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042f2:	f000 f811 	bl	8004318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042f6:	f7fc fc3d 	bl	8000b74 <main>
	bx	lr
 80042fa:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80042fc:	20005000 	.word	0x20005000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8004300:	0800443c 	.word	0x0800443c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004304:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004308:	2000010c 	.word	0x2000010c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800430c:	2000010c 	.word	0x2000010c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8004310:	200009d8 	.word	0x200009d8

08004314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004314:	e7fe      	b.n	8004314 <ADC1_2_IRQHandler>
	...

08004318 <__libc_init_array>:
 8004318:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <__libc_init_array+0x3c>)
 800431a:	b570      	push	{r4, r5, r6, lr}
 800431c:	461e      	mov	r6, r3
 800431e:	4c0e      	ldr	r4, [pc, #56]	; (8004358 <__libc_init_array+0x40>)
 8004320:	2500      	movs	r5, #0
 8004322:	1ae4      	subs	r4, r4, r3
 8004324:	10a4      	asrs	r4, r4, #2
 8004326:	42a5      	cmp	r5, r4
 8004328:	d004      	beq.n	8004334 <__libc_init_array+0x1c>
 800432a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800432e:	4798      	blx	r3
 8004330:	3501      	adds	r5, #1
 8004332:	e7f8      	b.n	8004326 <__libc_init_array+0xe>
 8004334:	f000 f816 	bl	8004364 <_init>
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <__libc_init_array+0x44>)
 800433a:	4c09      	ldr	r4, [pc, #36]	; (8004360 <__libc_init_array+0x48>)
 800433c:	461e      	mov	r6, r3
 800433e:	1ae4      	subs	r4, r4, r3
 8004340:	10a4      	asrs	r4, r4, #2
 8004342:	2500      	movs	r5, #0
 8004344:	42a5      	cmp	r5, r4
 8004346:	d004      	beq.n	8004352 <__libc_init_array+0x3a>
 8004348:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800434c:	4798      	blx	r3
 800434e:	3501      	adds	r5, #1
 8004350:	e7f8      	b.n	8004344 <__libc_init_array+0x2c>
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	08004434 	.word	0x08004434
 8004358:	08004434 	.word	0x08004434
 800435c:	08004434 	.word	0x08004434
 8004360:	08004438 	.word	0x08004438

08004364 <_init>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	bf00      	nop
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr

08004370 <_fini>:
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	bf00      	nop
 8004374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004376:	bc08      	pop	{r3}
 8004378:	469e      	mov	lr, r3
 800437a:	4770      	bx	lr
